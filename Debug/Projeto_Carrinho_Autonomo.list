
Projeto_Carrinho_Autonomo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005868  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005a38  08005a38  00015a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a98  08005a98  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aa0  08005aa0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000070  08005b18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08005b18  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa0e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002270  00000000  00000000  0002faae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00031d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00032a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228a2  00000000  00000000  000336d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a5c  00000000  00000000  00055f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a6b  00000000  00000000  000669d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  00138494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a20 	.word	0x08005a20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005a20 	.word	0x08005a20

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <MX_GPIO_Init+0x124>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a41      	ldr	r2, [pc, #260]	; (80006e8 <MX_GPIO_Init+0x124>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <MX_GPIO_Init+0x124>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <MX_GPIO_Init+0x124>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a3a      	ldr	r2, [pc, #232]	; (80006e8 <MX_GPIO_Init+0x124>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b38      	ldr	r3, [pc, #224]	; (80006e8 <MX_GPIO_Init+0x124>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <MX_GPIO_Init+0x124>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a33      	ldr	r2, [pc, #204]	; (80006e8 <MX_GPIO_Init+0x124>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <MX_GPIO_Init+0x124>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <MX_GPIO_Init+0x124>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a2c      	ldr	r2, [pc, #176]	; (80006e8 <MX_GPIO_Init+0x124>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <MX_GPIO_Init+0x124>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN4_Pin|IN3_Pin|IN2_Pin|IN1_Pin
 800064a:	2200      	movs	r2, #0
 800064c:	f240 210f 	movw	r1, #527	; 0x20f
 8000650:	4826      	ldr	r0, [pc, #152]	; (80006ec <MX_GPIO_Init+0x128>)
 8000652:	f001 fa99 	bl	8001b88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	4825      	ldr	r0, [pc, #148]	; (80006f0 <MX_GPIO_Init+0x12c>)
 800065c:	f001 fa94 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Liga_GPIO_Port, Liga_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	4823      	ldr	r0, [pc, #140]	; (80006f4 <MX_GPIO_Init+0x130>)
 8000668:	f001 fa8e 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000672:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <MX_GPIO_Init+0x128>)
 8000684:	f001 f8ec 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PC9 */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN2_Pin|IN1_Pin
 8000688:	f240 230f 	movw	r3, #527	; 0x20f
 800068c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <MX_GPIO_Init+0x128>)
 80006a2:	f001 f8dd 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a6:	2320      	movs	r3, #32
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <MX_GPIO_Init+0x12c>)
 80006be:	f001 f8cf 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Liga_Pin;
 80006c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Liga_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <MX_GPIO_Init+0x130>)
 80006dc:	f001 f8c0 	bl	8001860 <HAL_GPIO_Init>

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	; 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400

080006f8 <Pra_Frente>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//============================= Funcoes comandos do carrinho =======================//
void Pra_Frente() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); //IN1 high
 80006fc:	2201      	movs	r2, #1
 80006fe:	2108      	movs	r1, #8
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <Pra_Frente+0x30>)
 8000702:	f001 fa41 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); //IN2 low
 8000706:	2200      	movs	r2, #0
 8000708:	2104      	movs	r1, #4
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <Pra_Frente+0x30>)
 800070c:	f001 fa3c 	bl	8001b88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); //IN3 high
 8000710:	2201      	movs	r2, #1
 8000712:	2102      	movs	r1, #2
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <Pra_Frente+0x30>)
 8000716:	f001 fa37 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //IN4 low
 800071a:	2200      	movs	r2, #0
 800071c:	2101      	movs	r1, #1
 800071e:	4802      	ldr	r0, [pc, #8]	; (8000728 <Pra_Frente+0x30>)
 8000720:	f001 fa32 	bl	8001b88 <HAL_GPIO_WritePin>

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40020800 	.word	0x40020800

0800072c <Parado>:

void Parado() {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

	//while (func_stateP = 1) {

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); //IN1 high
 8000730:	2200      	movs	r2, #0
 8000732:	2108      	movs	r1, #8
 8000734:	4809      	ldr	r0, [pc, #36]	; (800075c <Parado+0x30>)
 8000736:	f001 fa27 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); //IN2 low
 800073a:	2200      	movs	r2, #0
 800073c:	2104      	movs	r1, #4
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <Parado+0x30>)
 8000740:	f001 fa22 	bl	8001b88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); //IN3 high
 8000744:	2200      	movs	r2, #0
 8000746:	2102      	movs	r1, #2
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <Parado+0x30>)
 800074a:	f001 fa1d 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //IN4 high
 800074e:	2200      	movs	r2, #0
 8000750:	2101      	movs	r1, #1
 8000752:	4802      	ldr	r0, [pc, #8]	; (800075c <Parado+0x30>)
 8000754:	f001 fa18 	bl	8001b88 <HAL_GPIO_WritePin>

	//}
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40020800 	.word	0x40020800

08000760 <Pra_Esquerda>:

void Pra_Esquerda() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

	//while (func_state = 1) {

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); //IN1 high
 8000764:	2201      	movs	r2, #1
 8000766:	2108      	movs	r1, #8
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <Pra_Esquerda+0x30>)
 800076a:	f001 fa0d 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); //IN2 low
 800076e:	2200      	movs	r2, #0
 8000770:	2104      	movs	r1, #4
 8000772:	4807      	ldr	r0, [pc, #28]	; (8000790 <Pra_Esquerda+0x30>)
 8000774:	f001 fa08 	bl	8001b88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); //IN3 high
 8000778:	2200      	movs	r2, #0
 800077a:	2102      	movs	r1, #2
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <Pra_Esquerda+0x30>)
 800077e:	f001 fa03 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); //IN4 high
 8000782:	2201      	movs	r2, #1
 8000784:	2101      	movs	r1, #1
 8000786:	4802      	ldr	r0, [pc, #8]	; (8000790 <Pra_Esquerda+0x30>)
 8000788:	f001 f9fe 	bl	8001b88 <HAL_GPIO_WritePin>
	//}

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40020800 	.word	0x40020800

08000794 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

//============================= Calculando largura de pulso do sensor ==========================//

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7f1b      	ldrb	r3, [r3, #28]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d116      	bne.n	80007d2 <HAL_TIM_IC_CaptureCallback+0x3e>

		tempo_alto = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_2);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80007b4:	edc3 7a00 	vstr	s15, [r3]
		distancia = tempo_alto / 58;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80007ba:	ed93 7a00 	vldr	s14, [r3]
 80007be:	eddf 6a09 	vldr	s13, [pc, #36]	; 80007e4 <HAL_TIM_IC_CaptureCallback+0x50>
 80007c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007ca:	ee17 2a90 	vmov	r2, s15
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_TIM_IC_CaptureCallback+0x54>)
 80007d0:	601a      	str	r2, [r3, #0]
	}

}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	42680000 	.word	0x42680000
 80007e8:	200000f4 	.word	0x200000f4

080007ec <HAL_TIM_PeriodElapsedCallback>:

//============================= Enviando pela serial =============================//

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a15      	ldr	r2, [pc, #84]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d113      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x3a>
		sprintf(msg, "\rDistancia: %i cm", distancia);
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	4914      	ldr	r1, [pc, #80]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000806:	4815      	ldr	r0, [pc, #84]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000808:	f004 fc9c 	bl	8005144 <siprintf>
		HAL_UART_Transmit(&huart2, msg, strlen(msg), tout);
 800080c:	4813      	ldr	r0, [pc, #76]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800080e:	f7ff fcff 	bl	8000210 <strlen>
 8000812:	4603      	mov	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	4910      	ldr	r1, [pc, #64]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800081c:	f003 fc99 	bl	8004152 <HAL_UART_Transmit>
		msg[0] = '/0';
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000822:	2230      	movs	r2, #48	; 0x30
 8000824:	701a      	strb	r2, [r3, #0]
	}


//============================= Comando caso haja obstaculo =======================//

	if (htim->Instance == TIM11) {
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d10b      	bne.n	8000848 <HAL_TIM_PeriodElapsedCallback+0x5c>

		cont++;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800083a:	701a      	strb	r2, [r3, #0]
		cont2++;
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000846:	701a      	strb	r2, [r3, #0]
	}
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40014400 	.word	0x40014400
 8000854:	200000f4 	.word	0x200000f4
 8000858:	08005a38 	.word	0x08005a38
 800085c:	20000090 	.word	0x20000090
 8000860:	20000268 	.word	0x20000268
 8000864:	40014800 	.word	0x40014800
 8000868:	200000f8 	.word	0x200000f8
 800086c:	200000f9 	.word	0x200000f9

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 fdde 	bl	8001434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f878 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f7ff fea2 	bl	80005c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000880:	f000 fd34 	bl	80012ec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000884:	f000 fa3e 	bl	8000d04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000888:	f000 fada 	bl	8000e40 <MX_TIM3_Init>
  MX_TIM10_Init();
 800088c:	f000 fb32 	bl	8000ef4 <MX_TIM10_Init>
  MX_TIM1_Init();
 8000890:	f000 f9aa 	bl	8000be8 <MX_TIM1_Init>
  MX_TIM11_Init();
 8000894:	f000 fb52 	bl	8000f3c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim10); // Serial
 8000898:	482b      	ldr	r0, [pc, #172]	; (8000948 <main+0xd8>)
 800089a:	f001 ffc7 	bl	800282c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);// Base de tempo
 800089e:	482b      	ldr	r0, [pc, #172]	; (800094c <main+0xdc>)
 80008a0:	f001 ffc4 	bl	800282c <HAL_TIM_Base_Start_IT>

///////////////////SONAR////////////////////////////////////
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //leitura sonar
 80008a4:	2100      	movs	r1, #0
 80008a6:	482a      	ldr	r0, [pc, #168]	; (8000950 <main+0xe0>)
 80008a8:	f002 f9a2 	bl	8002bf0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);// Combinado com o canal 1
 80008ac:	2104      	movs	r1, #4
 80008ae:	4828      	ldr	r0, [pc, #160]	; (8000950 <main+0xe0>)
 80008b0:	f002 f99e 	bl	8002bf0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //geracao trig sonnar
 80008b4:	2100      	movs	r1, #0
 80008b6:	4827      	ldr	r0, [pc, #156]	; (8000954 <main+0xe4>)
 80008b8:	f002 f878 	bl	80029ac <HAL_TIM_PWM_Start>

/////////////////////Vel.Motor//////////////////////////
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // velocidade motor direito   25kHz
 80008bc:	2108      	movs	r1, #8
 80008be:	4826      	ldr	r0, [pc, #152]	; (8000958 <main+0xe8>)
 80008c0:	f002 f874 	bl	80029ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // velocidade motor esquerdo  25kHz
 80008c4:	210c      	movs	r1, #12
 80008c6:	4824      	ldr	r0, [pc, #144]	; (8000958 <main+0xe8>)
 80008c8:	f002 f870 	bl	80029ac <HAL_TIM_PWM_Start>
	while (1) {


//============================= Maquina de estados =============================//

		switch (estado_atual) {
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <main+0xec>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d023      	beq.n	800091c <main+0xac>
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	dc2f      	bgt.n	8000938 <main+0xc8>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <main+0x72>
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d00d      	beq.n	80008fc <main+0x8c>
 80008e0:	e02a      	b.n	8000938 <main+0xc8>

		case frente:

			Pra_Frente();
 80008e2:	f7ff ff09 	bl	80006f8 <Pra_Frente>

			if (distancia <= 20){
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <main+0xf0>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b14      	cmp	r3, #20
 80008ec:	d827      	bhi.n	800093e <main+0xce>
				cont = 0;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <main+0xf4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
				estado_atual = parado;}
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <main+0xec>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]

			break;
 80008fa:	e020      	b.n	800093e <main+0xce>

		case parado:
		//cont = 0;

			Parado();
 80008fc:	f7ff ff16 	bl	800072c <Parado>

			if (cont >= 10) {
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <main+0xf4>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b09      	cmp	r3, #9
 8000906:	d91c      	bls.n	8000942 <main+0xd2>
				cont = 0;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <main+0xf4>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
				cont2 = 0;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <main+0xf8>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
				estado_atual = redirecionando;}
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <main+0xec>)
 8000916:	2202      	movs	r2, #2
 8000918:	701a      	strb	r2, [r3, #0]

			break;
 800091a:	e012      	b.n	8000942 <main+0xd2>


		case redirecionando:
			//cont2 = 0;

			if (cont2 >= 15) {
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <main+0xf8>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b0e      	cmp	r3, #14
 8000922:	d906      	bls.n	8000932 <main+0xc2>
				cont2 = 0;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <main+0xf8>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
				estado_atual = frente;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <main+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
			}
			else
				Pra_Esquerda();

			break;
 8000930:	e008      	b.n	8000944 <main+0xd4>
				Pra_Esquerda();
 8000932:	f7ff ff15 	bl	8000760 <Pra_Esquerda>
			break;
 8000936:	e005      	b.n	8000944 <main+0xd4>

		default:

			Parado();
 8000938:	f7ff fef8 	bl	800072c <Parado>

			break;
 800093c:	e002      	b.n	8000944 <main+0xd4>
			break;
 800093e:	bf00      	nop
 8000940:	e7c4      	b.n	80008cc <main+0x5c>
			break;
 8000942:	bf00      	nop
		switch (estado_atual) {
 8000944:	e7c2      	b.n	80008cc <main+0x5c>
 8000946:	bf00      	nop
 8000948:	200001d8 	.word	0x200001d8
 800094c:	20000220 	.word	0x20000220
 8000950:	20000148 	.word	0x20000148
 8000954:	20000190 	.word	0x20000190
 8000958:	20000100 	.word	0x20000100
 800095c:	200000fa 	.word	0x200000fa
 8000960:	200000f4 	.word	0x200000f4
 8000964:	200000f8 	.word	0x200000f8
 8000968:	200000f9 	.word	0x200000f9

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	; 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2234      	movs	r2, #52	; 0x34
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f004 fbda 	bl	8005134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <SystemClock_Config+0xd4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a29      	ldr	r2, [pc, #164]	; (8000a40 <SystemClock_Config+0xd4>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <SystemClock_Config+0xd4>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ac:	2300      	movs	r3, #0
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <SystemClock_Config+0xd8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b8:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <SystemClock_Config+0xd8>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <SystemClock_Config+0xd8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2310      	movs	r3, #16
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009dc:	2300      	movs	r3, #0
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e0:	2310      	movs	r3, #16
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fc28 	bl	8002250 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a06:	f000 f81f 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	2102      	movs	r1, #2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f8c8 	bl	8001bbc <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a32:	f000 f809 	bl	8000a48 <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3750      	adds	r7, #80	; 0x50
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a92:	2007      	movs	r0, #7
 8000a94:	f000 fe10 	bl	80016b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 fcf2 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000afe:	f002 f99f 	bl	8002e40 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000b04:	f002 f99c 	bl	8002e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000100 	.word	0x20000100
 8000b10:	200001d8 	.word	0x200001d8

08000b14 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000b1a:	f002 f991 	bl	8002e40 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000b1e:	4803      	ldr	r0, [pc, #12]	; (8000b2c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000b20:	f002 f98e 	bl	8002e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000100 	.word	0x20000100
 8000b2c:	20000220 	.word	0x20000220

08000b30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <TIM2_IRQHandler+0x10>)
 8000b36:	f002 f983 	bl	8002e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000148 	.word	0x20000148

08000b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <USART2_IRQHandler+0x10>)
 8000b4a:	f003 fb95 	bl	8004278 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000268 	.word	0x20000268

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f004 faaa 	bl	80050e0 <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20020000 	.word	0x20020000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	200000fc 	.word	0x200000fc
 8000bc0:	200002c0 	.word	0x200002c0

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b092      	sub	sp, #72	; 0x48
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2220      	movs	r2, #32
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 fa8e 	bl	8005134 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c18:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000c1a:	4a39      	ldr	r2, [pc, #228]	; (8000d00 <MX_TIM1_Init+0x118>)
 8000c1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000c1e:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000c20:	2253      	movs	r2, #83	; 0x53
 8000c22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40-1;
 8000c2a:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000c2c:	2227      	movs	r2, #39	; 0x27
 8000c2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000c44:	f001 fe62 	bl	800290c <HAL_TIM_PWM_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000c4e:	f7ff fefb 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4826      	ldr	r0, [pc, #152]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000c62:	f003 f947 	bl	8003ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000c6c:	f7ff feec 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c70:	2360      	movs	r3, #96	; 0x60
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	2208      	movs	r2, #8
 8000c92:	4619      	mov	r1, r3
 8000c94:	4819      	ldr	r0, [pc, #100]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000c96:	f002 fa77 	bl	8003188 <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000ca0:	f7ff fed2 	bl	8000a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	220c      	movs	r2, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	4813      	ldr	r0, [pc, #76]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000cae:	f002 fa6b 	bl	8003188 <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000cb8:	f7ff fec6 	bl	8000a48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4807      	ldr	r0, [pc, #28]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000ce0:	f003 f984 	bl	8003fec <HAL_TIMEx_ConfigBreakDeadTime>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000cea:	f7ff fead 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <MX_TIM1_Init+0x114>)
 8000cf0:	f000 fa56 	bl	80011a0 <HAL_TIM_MspPostInit>

}
 8000cf4:	bf00      	nop
 8000cf6:	3748      	adds	r7, #72	; 0x48
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000100 	.word	0x20000100
 8000d00:	40010000 	.word	0x40010000

08000d04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b090      	sub	sp, #64	; 0x40
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000d46:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000d48:	2253      	movs	r2, #83	; 0x53
 8000d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d68:	4834      	ldr	r0, [pc, #208]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000d6a:	f001 fd0f 	bl	800278c <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d74:	f7ff fe68 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d82:	4619      	mov	r1, r3
 8000d84:	482d      	ldr	r0, [pc, #180]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000d86:	f002 fac1 	bl	800330c <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d90:	f7ff fe5a 	bl	8000a48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d94:	4829      	ldr	r0, [pc, #164]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000d96:	f001 fed1 	bl	8002b3c <HAL_TIM_IC_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000da0:	f7ff fe52 	bl	8000a48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000da4:	2304      	movs	r3, #4
 8000da6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000da8:	2350      	movs	r3, #80	; 0x50
 8000daa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 5;
 8000db4:	2305      	movs	r3, #5
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	481f      	ldr	r0, [pc, #124]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000dc0:	f002 fb6b 	bl	800349a <HAL_TIM_SlaveConfigSynchro>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000dca:	f7ff fe3d 	bl	8000a48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 5;
 8000dda:	2305      	movs	r3, #5
 8000ddc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2200      	movs	r2, #0
 8000de4:	4619      	mov	r1, r3
 8000de6:	4815      	ldr	r0, [pc, #84]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000de8:	f002 f932 	bl	8003050 <HAL_TIM_IC_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000df2:	f7ff fe29 	bl	8000a48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000df6:	2302      	movs	r3, #2
 8000df8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2204      	movs	r2, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000e08:	f002 f922 	bl	8003050 <HAL_TIM_IC_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8000e12:	f7ff fe19 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_TIM2_Init+0x138>)
 8000e24:	f003 f866 	bl	8003ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8000e2e:	f7ff fe0b 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3740      	adds	r7, #64	; 0x40
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000148 	.word	0x20000148

08000e40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <MX_TIM3_Init+0xac>)
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <MX_TIM3_Init+0xb0>)
 8000e66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <MX_TIM3_Init+0xac>)
 8000e6a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <MX_TIM3_Init+0xac>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <MX_TIM3_Init+0xac>)
 8000e78:	2263      	movs	r2, #99	; 0x63
 8000e7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_TIM3_Init+0xac>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_TIM3_Init+0xac>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e88:	4818      	ldr	r0, [pc, #96]	; (8000eec <MX_TIM3_Init+0xac>)
 8000e8a:	f001 fd3f 	bl	800290c <HAL_TIM_PWM_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e94:	f7ff fdd8 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <MX_TIM3_Init+0xac>)
 8000ea8:	f003 f824 	bl	8003ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000eb2:	f7ff fdc9 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb6:	2360      	movs	r3, #96	; 0x60
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8000eba:	230a      	movs	r3, #10
 8000ebc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM3_Init+0xac>)
 8000ece:	f002 f95b 	bl	8003188 <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ed8:	f7ff fdb6 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM3_Init+0xac>)
 8000ede:	f000 f95f 	bl	80011a0 <HAL_TIM_MspPostInit>

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000190 	.word	0x20000190
 8000ef0:	40000400 	.word	0x40000400

08000ef4 <MX_TIM10_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_TIM10_Init+0x40>)
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <MX_TIM10_Init+0x44>)
 8000efc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <MX_TIM10_Init+0x40>)
 8000f00:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000f04:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_TIM10_Init+0x40>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_TIM10_Init+0x40>)
 8000f0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f12:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <MX_TIM10_Init+0x40>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_TIM10_Init+0x40>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_TIM10_Init+0x40>)
 8000f22:	f001 fc33 	bl	800278c <HAL_TIM_Base_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000f2c:	f7ff fd8c 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200001d8 	.word	0x200001d8
 8000f38:	40014400 	.word	0x40014400

08000f3c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_TIM11_Init+0x40>)
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <MX_TIM11_Init+0x44>)
 8000f44:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <MX_TIM11_Init+0x40>)
 8000f48:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000f4c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_TIM11_Init+0x40>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_TIM11_Init+0x40>)
 8000f56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f5a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <MX_TIM11_Init+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_TIM11_Init+0x40>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_TIM11_Init+0x40>)
 8000f6a:	f001 fc0f 	bl	800278c <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000f74:	f7ff fd68 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000220 	.word	0x20000220
 8000f80:	40014800 	.word	0x40014800

08000f84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a35      	ldr	r2, [pc, #212]	; (8001078 <HAL_TIM_PWM_MspInit+0xf4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d11e      	bne.n	8000fe4 <HAL_TIM_PWM_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a33      	ldr	r2, [pc, #204]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2019      	movs	r0, #25
 8000fc8:	f000 fb81 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fcc:	2019      	movs	r0, #25
 8000fce:	f000 fb9a 	bl	8001706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	201a      	movs	r0, #26
 8000fd8:	f000 fb79 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000fdc:	201a      	movs	r0, #26
 8000fde:	f000 fb92 	bl	8001706 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000fe2:	e044      	b.n	800106e <HAL_TIM_PWM_MspInit+0xea>
  else if(tim_pwmHandle->Instance==TIM3)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a25      	ldr	r2, [pc, #148]	; (8001080 <HAL_TIM_PWM_MspInit+0xfc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12c      	bne.n	8001048 <HAL_TIM_PWM_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001026:	2301      	movs	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001036:	2302      	movs	r3, #2
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4810      	ldr	r0, [pc, #64]	; (8001084 <HAL_TIM_PWM_MspInit+0x100>)
 8001042:	f000 fc0d 	bl	8001860 <HAL_GPIO_Init>
}
 8001046:	e012      	b.n	800106e <HAL_TIM_PWM_MspInit+0xea>
  else if(tim_pwmHandle->Instance==TIM4)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_TIM_PWM_MspInit+0x104>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10d      	bne.n	800106e <HAL_TIM_PWM_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_TIM_PWM_MspInit+0xf8>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
}
 800106e:	bf00      	nop
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40010000 	.word	0x40010000
 800107c:	40023800 	.word	0x40023800
 8001080:	40000400 	.word	0x40000400
 8001084:	40020400 	.word	0x40020400
 8001088:	40000800 	.word	0x40000800

0800108c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ac:	d135      	bne.n	800111a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a36      	ldr	r2, [pc, #216]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b34      	ldr	r3, [pc, #208]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4824      	ldr	r0, [pc, #144]	; (8001194 <HAL_TIM_Base_MspInit+0x108>)
 8001104:	f000 fbac 	bl	8001860 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	201c      	movs	r0, #28
 800110e:	f000 fade 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001112:	201c      	movs	r0, #28
 8001114:	f000 faf7 	bl	8001706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001118:	e036      	b.n	8001188 <HAL_TIM_Base_MspInit+0xfc>
  else if(tim_baseHandle->Instance==TIM10)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_TIM_Base_MspInit+0x10c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d116      	bne.n	8001152 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	4a18      	ldr	r2, [pc, #96]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 800112e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001132:	6453      	str	r3, [r2, #68]	; 0x44
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2019      	movs	r0, #25
 8001146:	f000 fac2 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800114a:	2019      	movs	r0, #25
 800114c:	f000 fadb 	bl	8001706 <HAL_NVIC_EnableIRQ>
}
 8001150:	e01a      	b.n	8001188 <HAL_TIM_Base_MspInit+0xfc>
  else if(tim_baseHandle->Instance==TIM11)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a11      	ldr	r2, [pc, #68]	; (800119c <HAL_TIM_Base_MspInit+0x110>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d115      	bne.n	8001188 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 8001166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116a:	6453      	str	r3, [r2, #68]	; 0x44
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_TIM_Base_MspInit+0x104>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	201a      	movs	r0, #26
 800117e:	f000 faa6 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001182:	201a      	movs	r0, #26
 8001184:	f000 fabf 	bl	8001706 <HAL_NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3730      	adds	r7, #48	; 0x30
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400
 8001198:	40014400 	.word	0x40014400
 800119c:	40014800 	.word	0x40014800

080011a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <HAL_TIM_MspPostInit+0x134>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d13d      	bne.n	800123e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	4b44      	ldr	r3, [pc, #272]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a43      	ldr	r2, [pc, #268]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a3c      	ldr	r2, [pc, #240]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b3a      	ldr	r3, [pc, #232]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB1     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800120a:	2301      	movs	r3, #1
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4831      	ldr	r0, [pc, #196]	; (80012dc <HAL_TIM_MspPostInit+0x13c>)
 8001216:	f000 fb23 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800121a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800122c:	2301      	movs	r3, #1
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	482a      	ldr	r0, [pc, #168]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 8001238:	f000 fb12 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800123c:	e046      	b.n	80012cc <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM3)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <HAL_TIM_MspPostInit+0x144>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d11e      	bne.n	8001286 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001264:	2310      	movs	r3, #16
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001274:	2302      	movs	r3, #2
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	4817      	ldr	r0, [pc, #92]	; (80012dc <HAL_TIM_MspPostInit+0x13c>)
 8001280:	f000 faee 	bl	8001860 <HAL_GPIO_Init>
}
 8001284:	e022      	b.n	80012cc <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_TIM_MspPostInit+0x148>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d11d      	bne.n	80012cc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_TIM_MspPostInit+0x138>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ac:	2340      	movs	r3, #64	; 0x40
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012bc:	2302      	movs	r3, #2
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_TIM_MspPostInit+0x13c>)
 80012c8:	f000 faca 	bl	8001860 <HAL_GPIO_Init>
}
 80012cc:	bf00      	nop
 80012ce:	3730      	adds	r7, #48	; 0x30
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40010000 	.word	0x40010000
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40000400 	.word	0x40000400
 80012e8:	40000800 	.word	0x40000800

080012ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <MX_USART2_UART_Init+0x50>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001324:	f002 fec8 	bl	80040b8 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132e:	f7ff fb8b 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000268 	.word	0x20000268
 800133c:	40004400 	.word	0x40004400

08001340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_UART_MspInit+0x94>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d133      	bne.n	80013ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_UART_MspInit+0x98>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800139a:	230c      	movs	r3, #12
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013aa:	2307      	movs	r3, #7
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <HAL_UART_MspInit+0x9c>)
 80013b6:	f000 fa53 	bl	8001860 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2026      	movs	r0, #38	; 0x26
 80013c0:	f000 f985 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c4:	2026      	movs	r0, #38	; 0x26
 80013c6:	f000 f99e 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40004400 	.word	0x40004400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001418 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013e6:	490e      	ldr	r1, [pc, #56]	; (8001420 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013fc:	4c0b      	ldr	r4, [pc, #44]	; (800142c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800140a:	f7ff fbdb 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f003 fe6d 	bl	80050ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff fa2d 	bl	8000870 <main>
  bx  lr    
 8001416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001424:	08005aa8 	.word	0x08005aa8
  ldr r2, =_sbss
 8001428:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800142c:	200002c0 	.word	0x200002c0

08001430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <HAL_Init+0x40>)
 800143e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_Init+0x40>)
 800144a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_Init+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_Init+0x40>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f92b 	bl	80016b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f808 	bl	8001478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001468:	f7ff faf4 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023c00 	.word	0x40023c00

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_InitTick+0x54>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x58>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f943 	bl	8001722 <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00e      	b.n	80014c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d80a      	bhi.n	80014c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f000 f90b 	bl	80016ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_InitTick+0x5c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008
 80014fc:	200002ac 	.word	0x200002ac

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200002ac 	.word	0x200002ac

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	db0b      	blt.n	80015a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	4907      	ldr	r1, [pc, #28]	; (80015b4 <__NVIC_EnableIRQ+0x38>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	2001      	movs	r0, #1
 800159e:	fa00 f202 	lsl.w	r2, r0, r2
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	; (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	; (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001684:	d301      	bcc.n	800168a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001686:	2301      	movs	r3, #1
 8001688:	e00f      	b.n	80016aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <SysTick_Config+0x40>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001692:	210f      	movs	r1, #15
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f7ff ff8e 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <SysTick_Config+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <SysTick_Config+0x40>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff29 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff3e 	bl	8001560 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff8e 	bl	800160c <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5d 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff31 	bl	800157c <__NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffa2 	bl	8001674 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff feda 	bl	8001500 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d008      	beq.n	800176c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e052      	b.n	8001812 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0216 	bic.w	r2, r2, #22
 800177a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800178a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	2b00      	cmp	r3, #0
 8001792:	d103      	bne.n	800179c <HAL_DMA_Abort+0x62>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0208 	bic.w	r2, r2, #8
 80017aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0201 	bic.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017bc:	e013      	b.n	80017e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017be:	f7ff fe9f 	bl	8001500 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d90c      	bls.n	80017e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2220      	movs	r2, #32
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e015      	b.n	8001812 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e4      	bne.n	80017be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	223f      	movs	r2, #63	; 0x3f
 80017fa:	409a      	lsls	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d004      	beq.n	8001838 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e00c      	b.n	8001852 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2205      	movs	r2, #5
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e165      	b.n	8001b48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 8154 	bne.w	8001b42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d005      	beq.n	80018b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d130      	bne.n	8001914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e8:	2201      	movs	r2, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 0201 	and.w	r2, r3, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b03      	cmp	r3, #3
 800191e:	d017      	beq.n	8001950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d123      	bne.n	80019a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80ae 	beq.w	8001b42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b5d      	ldr	r3, [pc, #372]	; (8001b60 <HAL_GPIO_Init+0x300>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a5c      	ldr	r2, [pc, #368]	; (8001b60 <HAL_GPIO_Init+0x300>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b5a      	ldr	r3, [pc, #360]	; (8001b60 <HAL_GPIO_Init+0x300>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a02:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_GPIO_Init+0x304>)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4f      	ldr	r2, [pc, #316]	; (8001b68 <HAL_GPIO_Init+0x308>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d025      	beq.n	8001a7a <HAL_GPIO_Init+0x21a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4e      	ldr	r2, [pc, #312]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01f      	beq.n	8001a76 <HAL_GPIO_Init+0x216>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4d      	ldr	r2, [pc, #308]	; (8001b70 <HAL_GPIO_Init+0x310>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x212>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4c      	ldr	r2, [pc, #304]	; (8001b74 <HAL_GPIO_Init+0x314>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x20e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4b      	ldr	r2, [pc, #300]	; (8001b78 <HAL_GPIO_Init+0x318>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x20a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4a      	ldr	r2, [pc, #296]	; (8001b7c <HAL_GPIO_Init+0x31c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x206>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <HAL_GPIO_Init+0x320>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x202>
 8001a5e:	2306      	movs	r3, #6
 8001a60:	e00c      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a62:	2307      	movs	r3, #7
 8001a64:	e00a      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a66:	2305      	movs	r3, #5
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f002 0203 	and.w	r2, r2, #3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a8c:	4935      	ldr	r1, [pc, #212]	; (8001b64 <HAL_GPIO_Init+0x304>)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001abe:	4a31      	ldr	r2, [pc, #196]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aee:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b12:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b3c:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	f67f ae96 	bls.w	800187c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40021400 	.word	0x40021400
 8001b80:	40021800 	.word	0x40021800
 8001b84:	40013c00 	.word	0x40013c00

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	619a      	str	r2, [r3, #24]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0cc      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d90c      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0b8      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c10:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	494d      	ldr	r1, [pc, #308]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d044      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d119      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e07f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e06f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e067      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 0203 	bic.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4934      	ldr	r1, [pc, #208]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cac:	f7ff fc28 	bl	8001500 <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7ff fc24 	bl	8001500 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e04f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 020c 	and.w	r2, r3, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1eb      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d20c      	bcs.n	8001d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e032      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4916      	ldr	r1, [pc, #88]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	490e      	ldr	r1, [pc, #56]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d42:	f000 f855 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	490a      	ldr	r1, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	5ccb      	ldrb	r3, [r1, r3]
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fb88 	bl	8001478 <HAL_InitTick>

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023c00 	.word	0x40023c00
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	08005a4c 	.word	0x08005a4c
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08005a5c 	.word	0x08005a5c

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dcc:	f7ff ffdc 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0b5b      	lsrs	r3, r3, #13
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	08005a5c 	.word	0x08005a5c

08001df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df4:	b0ae      	sub	sp, #184	; 0xb8
 8001df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e16:	4bcb      	ldr	r3, [pc, #812]	; (8002144 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	f200 8206 	bhi.w	8002230 <HAL_RCC_GetSysClockFreq+0x440>
 8001e24:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2a:	bf00      	nop
 8001e2c:	08001e61 	.word	0x08001e61
 8001e30:	08002231 	.word	0x08002231
 8001e34:	08002231 	.word	0x08002231
 8001e38:	08002231 	.word	0x08002231
 8001e3c:	08001e69 	.word	0x08001e69
 8001e40:	08002231 	.word	0x08002231
 8001e44:	08002231 	.word	0x08002231
 8001e48:	08002231 	.word	0x08002231
 8001e4c:	08001e71 	.word	0x08001e71
 8001e50:	08002231 	.word	0x08002231
 8001e54:	08002231 	.word	0x08002231
 8001e58:	08002231 	.word	0x08002231
 8001e5c:	08002061 	.word	0x08002061
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4bb9      	ldr	r3, [pc, #740]	; (8002148 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001e66:	e1e7      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e68:	4bb8      	ldr	r3, [pc, #736]	; (800214c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e6e:	e1e3      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e70:	4bb4      	ldr	r3, [pc, #720]	; (8002144 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e7c:	4bb1      	ldr	r3, [pc, #708]	; (8002144 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d071      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e88:	4bae      	ldr	r3, [pc, #696]	; (8002144 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001eae:	4622      	mov	r2, r4
 8001eb0:	462b      	mov	r3, r5
 8001eb2:	f04f 0000 	mov.w	r0, #0
 8001eb6:	f04f 0100 	mov.w	r1, #0
 8001eba:	0159      	lsls	r1, r3, #5
 8001ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec0:	0150      	lsls	r0, r2, #5
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	1a51      	subs	r1, r2, r1
 8001eca:	6439      	str	r1, [r7, #64]	; 0x40
 8001ecc:	4629      	mov	r1, r5
 8001ece:	eb63 0301 	sbc.w	r3, r3, r1
 8001ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001ee0:	4649      	mov	r1, r9
 8001ee2:	018b      	lsls	r3, r1, #6
 8001ee4:	4641      	mov	r1, r8
 8001ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eea:	4641      	mov	r1, r8
 8001eec:	018a      	lsls	r2, r1, #6
 8001eee:	4641      	mov	r1, r8
 8001ef0:	1a51      	subs	r1, r2, r1
 8001ef2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ef4:	4649      	mov	r1, r9
 8001ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001f08:	4649      	mov	r1, r9
 8001f0a:	00cb      	lsls	r3, r1, #3
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f12:	4641      	mov	r1, r8
 8001f14:	00ca      	lsls	r2, r1, #3
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4622      	mov	r2, r4
 8001f1e:	189b      	adds	r3, r3, r2
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
 8001f22:	462b      	mov	r3, r5
 8001f24:	460a      	mov	r2, r1
 8001f26:	eb42 0303 	adc.w	r3, r2, r3
 8001f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f38:	4629      	mov	r1, r5
 8001f3a:	024b      	lsls	r3, r1, #9
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f42:	4621      	mov	r1, r4
 8001f44:	024a      	lsls	r2, r1, #9
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001f5c:	f7fe f9b0 	bl	80002c0 <__aeabi_uldivmod>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4613      	mov	r3, r2
 8001f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f6a:	e067      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6c:	4b75      	ldr	r3, [pc, #468]	; (8002144 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	099b      	lsrs	r3, r3, #6
 8001f72:	2200      	movs	r2, #0
 8001f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f84:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f86:	2300      	movs	r3, #0
 8001f88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001f8e:	4622      	mov	r2, r4
 8001f90:	462b      	mov	r3, r5
 8001f92:	f04f 0000 	mov.w	r0, #0
 8001f96:	f04f 0100 	mov.w	r1, #0
 8001f9a:	0159      	lsls	r1, r3, #5
 8001f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa0:	0150      	lsls	r0, r2, #5
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	1a51      	subs	r1, r2, r1
 8001faa:	62b9      	str	r1, [r7, #40]	; 0x28
 8001fac:	4629      	mov	r1, r5
 8001fae:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001fc0:	4649      	mov	r1, r9
 8001fc2:	018b      	lsls	r3, r1, #6
 8001fc4:	4641      	mov	r1, r8
 8001fc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fca:	4641      	mov	r1, r8
 8001fcc:	018a      	lsls	r2, r1, #6
 8001fce:	4641      	mov	r1, r8
 8001fd0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fd4:	4649      	mov	r1, r9
 8001fd6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fe6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fee:	4692      	mov	sl, r2
 8001ff0:	469b      	mov	fp, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	eb1a 0303 	adds.w	r3, sl, r3
 8001ff8:	623b      	str	r3, [r7, #32]
 8001ffa:	462b      	mov	r3, r5
 8001ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800200e:	4629      	mov	r1, r5
 8002010:	028b      	lsls	r3, r1, #10
 8002012:	4621      	mov	r1, r4
 8002014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002018:	4621      	mov	r1, r4
 800201a:	028a      	lsls	r2, r1, #10
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002024:	2200      	movs	r2, #0
 8002026:	673b      	str	r3, [r7, #112]	; 0x70
 8002028:	677a      	str	r2, [r7, #116]	; 0x74
 800202a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800202e:	f7fe f947 	bl	80002c0 <__aeabi_uldivmod>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4613      	mov	r3, r2
 8002038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800203c:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_RCC_GetSysClockFreq+0x354>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	0c1b      	lsrs	r3, r3, #16
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	3301      	adds	r3, #1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800204e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800205e:	e0eb      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002060:	4b38      	ldr	r3, [pc, #224]	; (8002144 <HAL_RCC_GetSysClockFreq+0x354>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCC_GetSysClockFreq+0x354>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d06b      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002078:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_RCC_GetSysClockFreq+0x354>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	2200      	movs	r2, #0
 8002080:	66bb      	str	r3, [r7, #104]	; 0x68
 8002082:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800208a:	663b      	str	r3, [r7, #96]	; 0x60
 800208c:	2300      	movs	r3, #0
 800208e:	667b      	str	r3, [r7, #100]	; 0x64
 8002090:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002094:	4622      	mov	r2, r4
 8002096:	462b      	mov	r3, r5
 8002098:	f04f 0000 	mov.w	r0, #0
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	0159      	lsls	r1, r3, #5
 80020a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a6:	0150      	lsls	r0, r2, #5
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4621      	mov	r1, r4
 80020ae:	1a51      	subs	r1, r2, r1
 80020b0:	61b9      	str	r1, [r7, #24]
 80020b2:	4629      	mov	r1, r5
 80020b4:	eb63 0301 	sbc.w	r3, r3, r1
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80020c6:	4659      	mov	r1, fp
 80020c8:	018b      	lsls	r3, r1, #6
 80020ca:	4651      	mov	r1, sl
 80020cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020d0:	4651      	mov	r1, sl
 80020d2:	018a      	lsls	r2, r1, #6
 80020d4:	4651      	mov	r1, sl
 80020d6:	ebb2 0801 	subs.w	r8, r2, r1
 80020da:	4659      	mov	r1, fp
 80020dc:	eb63 0901 	sbc.w	r9, r3, r1
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020f4:	4690      	mov	r8, r2
 80020f6:	4699      	mov	r9, r3
 80020f8:	4623      	mov	r3, r4
 80020fa:	eb18 0303 	adds.w	r3, r8, r3
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	462b      	mov	r3, r5
 8002102:	eb49 0303 	adc.w	r3, r9, r3
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002114:	4629      	mov	r1, r5
 8002116:	024b      	lsls	r3, r1, #9
 8002118:	4621      	mov	r1, r4
 800211a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800211e:	4621      	mov	r1, r4
 8002120:	024a      	lsls	r2, r1, #9
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800212a:	2200      	movs	r2, #0
 800212c:	65bb      	str	r3, [r7, #88]	; 0x58
 800212e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002130:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002134:	f7fe f8c4 	bl	80002c0 <__aeabi_uldivmod>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4613      	mov	r3, r2
 800213e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002142:	e065      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x420>
 8002144:	40023800 	.word	0x40023800
 8002148:	00f42400 	.word	0x00f42400
 800214c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002150:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_RCC_GetSysClockFreq+0x458>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	2200      	movs	r2, #0
 8002158:	4618      	mov	r0, r3
 800215a:	4611      	mov	r1, r2
 800215c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002160:	653b      	str	r3, [r7, #80]	; 0x50
 8002162:	2300      	movs	r3, #0
 8002164:	657b      	str	r3, [r7, #84]	; 0x54
 8002166:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800216a:	4642      	mov	r2, r8
 800216c:	464b      	mov	r3, r9
 800216e:	f04f 0000 	mov.w	r0, #0
 8002172:	f04f 0100 	mov.w	r1, #0
 8002176:	0159      	lsls	r1, r3, #5
 8002178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800217c:	0150      	lsls	r0, r2, #5
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4641      	mov	r1, r8
 8002184:	1a51      	subs	r1, r2, r1
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	4649      	mov	r1, r9
 800218a:	eb63 0301 	sbc.w	r3, r3, r1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800219c:	4659      	mov	r1, fp
 800219e:	018b      	lsls	r3, r1, #6
 80021a0:	4651      	mov	r1, sl
 80021a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a6:	4651      	mov	r1, sl
 80021a8:	018a      	lsls	r2, r1, #6
 80021aa:	4651      	mov	r1, sl
 80021ac:	1a54      	subs	r4, r2, r1
 80021ae:	4659      	mov	r1, fp
 80021b0:	eb63 0501 	sbc.w	r5, r3, r1
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	00eb      	lsls	r3, r5, #3
 80021be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c2:	00e2      	lsls	r2, r4, #3
 80021c4:	4614      	mov	r4, r2
 80021c6:	461d      	mov	r5, r3
 80021c8:	4643      	mov	r3, r8
 80021ca:	18e3      	adds	r3, r4, r3
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	464b      	mov	r3, r9
 80021d0:	eb45 0303 	adc.w	r3, r5, r3
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021e2:	4629      	mov	r1, r5
 80021e4:	028b      	lsls	r3, r1, #10
 80021e6:	4621      	mov	r1, r4
 80021e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021ec:	4621      	mov	r1, r4
 80021ee:	028a      	lsls	r2, r1, #10
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021f8:	2200      	movs	r2, #0
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80021fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80021fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002202:	f7fe f85d 	bl	80002c0 <__aeabi_uldivmod>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4613      	mov	r3, r2
 800220c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_RCC_GetSysClockFreq+0x458>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	0f1b      	lsrs	r3, r3, #28
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800221e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002222:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800222e:	e003      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002236:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002238:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800223c:	4618      	mov	r0, r3
 800223e:	37b8      	adds	r7, #184	; 0xb8
 8002240:	46bd      	mov	sp, r7
 8002242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	00f42400 	.word	0x00f42400

08002250 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e28d      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8083 	beq.w	8002376 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002270:	4b94      	ldr	r3, [pc, #592]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b04      	cmp	r3, #4
 800227a:	d019      	beq.n	80022b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800227c:	4b91      	ldr	r3, [pc, #580]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002284:	2b08      	cmp	r3, #8
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002288:	4b8e      	ldr	r3, [pc, #568]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002294:	d00c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002296:	4b8b      	ldr	r3, [pc, #556]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d112      	bne.n	80022c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a2:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ae:	d10b      	bne.n	80022c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	4b84      	ldr	r3, [pc, #528]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05b      	beq.n	8002374 <HAL_RCC_OscConfig+0x124>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d157      	bne.n	8002374 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e25a      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_OscConfig+0x90>
 80022d2:	4b7c      	ldr	r3, [pc, #496]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7b      	ldr	r2, [pc, #492]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e01d      	b.n	800231c <HAL_RCC_OscConfig+0xcc>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0xb4>
 80022ea:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a75      	ldr	r2, [pc, #468]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a72      	ldr	r2, [pc, #456]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0xcc>
 8002304:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6e      	ldr	r2, [pc, #440]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a6b      	ldr	r2, [pc, #428]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff f8ec 	bl	8001500 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff f8e8 	bl	8001500 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e21f      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0xdc>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff f8d8 	bl	8001500 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff f8d4 	bl	8001500 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e20b      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x104>
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d06f      	beq.n	8002462 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002382:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b00      	cmp	r3, #0
 800238c:	d017      	beq.n	80023be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800238e:	4b4d      	ldr	r3, [pc, #308]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002396:	2b08      	cmp	r3, #8
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800239a:	4b4a      	ldr	r3, [pc, #296]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d11c      	bne.n	80023ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b44      	ldr	r3, [pc, #272]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d116      	bne.n	80023ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_RCC_OscConfig+0x186>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d001      	beq.n	80023d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e1d3      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4937      	ldr	r1, [pc, #220]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	e03a      	b.n	8002462 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f4:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <HAL_RCC_OscConfig+0x278>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7ff f881 	bl	8001500 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002402:	f7ff f87d 	bl	8001500 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e1b4      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002420:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4925      	ldr	r1, [pc, #148]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
 8002434:	e015      	b.n	8002462 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_RCC_OscConfig+0x278>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7ff f860 	bl	8001500 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002444:	f7ff f85c 	bl	8001500 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e193      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d036      	beq.n	80024dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d016      	beq.n	80024a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_RCC_OscConfig+0x27c>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7ff f840 	bl	8001500 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002484:	f7ff f83c 	bl	8001500 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e173      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x234>
 80024a2:	e01b      	b.n	80024dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_OscConfig+0x27c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024aa:	f7ff f829 	bl	8001500 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b0:	e00e      	b.n	80024d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b2:	f7ff f825 	bl	8001500 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d907      	bls.n	80024d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e15c      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	42470000 	.word	0x42470000
 80024cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	4b8a      	ldr	r3, [pc, #552]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 80024d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1ea      	bne.n	80024b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8097 	beq.w	8002618 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b83      	ldr	r3, [pc, #524]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002516:	2301      	movs	r3, #1
 8002518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b79      	ldr	r3, [pc, #484]	; (8002700 <HAL_RCC_OscConfig+0x4b0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d118      	bne.n	8002558 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002526:	4b76      	ldr	r3, [pc, #472]	; (8002700 <HAL_RCC_OscConfig+0x4b0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a75      	ldr	r2, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0x4b0>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002532:	f7fe ffe5 	bl	8001500 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe ffe1 	bl	8001500 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e118      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <HAL_RCC_OscConfig+0x4b0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x31e>
 8002560:	4b66      	ldr	r3, [pc, #408]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a65      	ldr	r2, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
 800256c:	e01c      	b.n	80025a8 <HAL_RCC_OscConfig+0x358>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b05      	cmp	r3, #5
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x340>
 8002576:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a60      	ldr	r2, [pc, #384]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
 8002582:	4b5e      	ldr	r3, [pc, #376]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a5d      	ldr	r2, [pc, #372]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0x358>
 8002590:	4b5a      	ldr	r3, [pc, #360]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a59      	ldr	r2, [pc, #356]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
 800259c:	4b57      	ldr	r3, [pc, #348]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a56      	ldr	r2, [pc, #344]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 80025a2:	f023 0304 	bic.w	r3, r3, #4
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d015      	beq.n	80025dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7fe ffa6 	bl	8001500 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe ffa2 	bl	8001500 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0d7      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	4b4b      	ldr	r3, [pc, #300]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0ee      	beq.n	80025b8 <HAL_RCC_OscConfig+0x368>
 80025da:	e014      	b.n	8002606 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe ff90 	bl	8001500 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7fe ff8c 	bl	8001500 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e0c1      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fa:	4b40      	ldr	r3, [pc, #256]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1ee      	bne.n	80025e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260c:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	4a3a      	ldr	r2, [pc, #232]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002616:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80ad 	beq.w	800277c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002622:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d060      	beq.n	80026f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d145      	bne.n	80026c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <HAL_RCC_OscConfig+0x4b4>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe ff60 	bl	8001500 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe ff5c 	bl	8001500 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e093      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	4b29      	ldr	r3, [pc, #164]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	019b      	lsls	r3, r3, #6
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	3b01      	subs	r3, #1
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	071b      	lsls	r3, r3, #28
 800268e:	491b      	ldr	r1, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_RCC_OscConfig+0x4b4>)
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe ff31 	bl	8001500 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe ff2d 	bl	8001500 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e064      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x452>
 80026c0:	e05c      	b.n	800277c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_RCC_OscConfig+0x4b4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe ff1a 	bl	8001500 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe ff16 	bl	8001500 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e04d      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x480>
 80026ee:	e045      	b.n	800277c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e040      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
 80026fc:	40023800 	.word	0x40023800
 8002700:	40007000 	.word	0x40007000
 8002704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002708:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <HAL_RCC_OscConfig+0x538>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d030      	beq.n	8002778 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d129      	bne.n	8002778 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d122      	bne.n	8002778 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800273e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002740:	4293      	cmp	r3, r2
 8002742:	d119      	bne.n	8002778 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	3b01      	subs	r3, #1
 8002752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d10f      	bne.n	8002778 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800

0800278c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e041      	b.n	8002822 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe fc6a 	bl	800108c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3304      	adds	r3, #4
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f000 fec6 	bl	800355c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d001      	beq.n	8002844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e04e      	b.n	80028e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a23      	ldr	r2, [pc, #140]	; (80028f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d022      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286e:	d01d      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d018      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1e      	ldr	r2, [pc, #120]	; (80028f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d013      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <HAL_TIM_Base_Start_IT+0xd0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00e      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_TIM_Base_Start_IT+0xd4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d009      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a19      	ldr	r2, [pc, #100]	; (8002904 <HAL_TIM_Base_Start_IT+0xd8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_TIM_Base_Start_IT+0xdc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d111      	bne.n	80028d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d010      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ce:	e007      	b.n	80028e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40000c00 	.word	0x40000c00
 8002900:	40010400 	.word	0x40010400
 8002904:	40014000 	.word	0x40014000
 8002908:	40001800 	.word	0x40001800

0800290c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e041      	b.n	80029a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe fb26 	bl	8000f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3304      	adds	r3, #4
 8002948:	4619      	mov	r1, r3
 800294a:	4610      	mov	r0, r2
 800294c:	f000 fe06 	bl	800355c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_TIM_PWM_Start+0x24>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e022      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d109      	bne.n	80029ea <HAL_TIM_PWM_Start+0x3e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	e015      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d109      	bne.n	8002a04 <HAL_TIM_PWM_Start+0x58>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e008      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07c      	b.n	8002b18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0x82>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a2c:	e013      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0x92>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a3c:	e00b      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_PWM_Start+0xa2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4c:	e003      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	6839      	ldr	r1, [r7, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 fa22 	bl	8003ea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a2d      	ldr	r2, [pc, #180]	; (8002b20 <HAL_TIM_PWM_Start+0x174>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d004      	beq.n	8002a78 <HAL_TIM_PWM_Start+0xcc>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a2c      	ldr	r2, [pc, #176]	; (8002b24 <HAL_TIM_PWM_Start+0x178>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d101      	bne.n	8002a7c <HAL_TIM_PWM_Start+0xd0>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_TIM_PWM_Start+0xd2>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <HAL_TIM_PWM_Start+0x174>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d022      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_TIM_PWM_Start+0x17c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_TIM_PWM_Start+0x180>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_TIM_PWM_Start+0x184>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_TIM_PWM_Start+0x178>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_TIM_PWM_Start+0x188>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <HAL_TIM_PWM_Start+0x18c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d111      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d010      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	e007      	b.n	8002b16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40010400 	.word	0x40010400
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40000c00 	.word	0x40000c00
 8002b34:	40014000 	.word	0x40014000
 8002b38:	40001800 	.word	0x40001800

08002b3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e041      	b.n	8002bd2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f839 	bl	8002bda <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f000 fcee 	bl	800355c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_IC_Start_IT+0x1e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	e013      	b.n	8002c36 <HAL_TIM_IC_Start_IT+0x46>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_IC_Start_IT+0x2e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e00b      	b.n	8002c36 <HAL_TIM_IC_Start_IT+0x46>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_IC_Start_IT+0x3e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e003      	b.n	8002c36 <HAL_TIM_IC_Start_IT+0x46>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <HAL_TIM_IC_Start_IT+0x58>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e013      	b.n	8002c70 <HAL_TIM_IC_Start_IT+0x80>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d104      	bne.n	8002c58 <HAL_TIM_IC_Start_IT+0x68>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e00b      	b.n	8002c70 <HAL_TIM_IC_Start_IT+0x80>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d104      	bne.n	8002c68 <HAL_TIM_IC_Start_IT+0x78>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e003      	b.n	8002c70 <HAL_TIM_IC_Start_IT+0x80>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c72:	7bbb      	ldrb	r3, [r7, #14]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d102      	bne.n	8002c7e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c78:	7b7b      	ldrb	r3, [r7, #13]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d001      	beq.n	8002c82 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0cc      	b.n	8002e1c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_IC_Start_IT+0xa2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c90:	e013      	b.n	8002cba <HAL_TIM_IC_Start_IT+0xca>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_IC_Start_IT+0xb2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca0:	e00b      	b.n	8002cba <HAL_TIM_IC_Start_IT+0xca>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_IC_Start_IT+0xc2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb0:	e003      	b.n	8002cba <HAL_TIM_IC_Start_IT+0xca>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d104      	bne.n	8002cca <HAL_TIM_IC_Start_IT+0xda>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc8:	e013      	b.n	8002cf2 <HAL_TIM_IC_Start_IT+0x102>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d104      	bne.n	8002cda <HAL_TIM_IC_Start_IT+0xea>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd8:	e00b      	b.n	8002cf2 <HAL_TIM_IC_Start_IT+0x102>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_IC_Start_IT+0xfa>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce8:	e003      	b.n	8002cf2 <HAL_TIM_IC_Start_IT+0x102>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d841      	bhi.n	8002d7c <HAL_TIM_IC_Start_IT+0x18c>
 8002cf8:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <HAL_TIM_IC_Start_IT+0x110>)
 8002cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfe:	bf00      	nop
 8002d00:	08002d35 	.word	0x08002d35
 8002d04:	08002d7d 	.word	0x08002d7d
 8002d08:	08002d7d 	.word	0x08002d7d
 8002d0c:	08002d7d 	.word	0x08002d7d
 8002d10:	08002d47 	.word	0x08002d47
 8002d14:	08002d7d 	.word	0x08002d7d
 8002d18:	08002d7d 	.word	0x08002d7d
 8002d1c:	08002d7d 	.word	0x08002d7d
 8002d20:	08002d59 	.word	0x08002d59
 8002d24:	08002d7d 	.word	0x08002d7d
 8002d28:	08002d7d 	.word	0x08002d7d
 8002d2c:	08002d7d 	.word	0x08002d7d
 8002d30:	08002d6b 	.word	0x08002d6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0202 	orr.w	r2, r2, #2
 8002d42:	60da      	str	r2, [r3, #12]
      break;
 8002d44:	e01d      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0204 	orr.w	r2, r2, #4
 8002d54:	60da      	str	r2, [r3, #12]
      break;
 8002d56:	e014      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0208 	orr.w	r2, r2, #8
 8002d66:	60da      	str	r2, [r3, #12]
      break;
 8002d68:	e00b      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0210 	orr.w	r2, r2, #16
 8002d78:	60da      	str	r2, [r3, #12]
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d80:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d148      	bne.n	8002e1a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	6839      	ldr	r1, [r7, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 f889 	bl	8003ea8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <HAL_TIM_IC_Start_IT+0x234>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d022      	beq.n	8002de6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da8:	d01d      	beq.n	8002de6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_TIM_IC_Start_IT+0x238>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d018      	beq.n	8002de6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <HAL_TIM_IC_Start_IT+0x23c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <HAL_TIM_IC_Start_IT+0x240>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00e      	beq.n	8002de6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <HAL_TIM_IC_Start_IT+0x244>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d009      	beq.n	8002de6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <HAL_TIM_IC_Start_IT+0x248>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d004      	beq.n	8002de6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <HAL_TIM_IC_Start_IT+0x24c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d111      	bne.n	8002e0a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b06      	cmp	r3, #6
 8002df6:	d010      	beq.n	8002e1a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e08:	e007      	b.n	8002e1a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40010000 	.word	0x40010000
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	40010400 	.word	0x40010400
 8002e38:	40014000 	.word	0x40014000
 8002e3c:	40001800 	.word	0x40001800

08002e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d122      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d11b      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0202 	mvn.w	r2, #2
 8002e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fd fc86 	bl	8000794 <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fb47 	bl	800351e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fb4e 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d122      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0204 	mvn.w	r2, #4
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd fc5c 	bl	8000794 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fb1d 	bl	800351e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fb24 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d122      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d11b      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0208 	mvn.w	r2, #8
 8002f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fd fc32 	bl	8000794 <HAL_TIM_IC_CaptureCallback>
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 faf3 	bl	800351e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fafa 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d122      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b10      	cmp	r3, #16
 8002f5e:	d11b      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0210 	mvn.w	r2, #16
 8002f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fc08 	bl	8000794 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fac9 	bl	800351e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fad0 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d107      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0201 	mvn.w	r2, #1
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd fc14 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b80      	cmp	r3, #128	; 0x80
 8002fde:	d107      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f001 f85a 	bl	80040a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d10e      	bne.n	800301c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b40      	cmp	r3, #64	; 0x40
 800300a:	d107      	bne.n	800301c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa95 	bl	8003546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b20      	cmp	r3, #32
 8003028:	d10e      	bne.n	8003048 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b20      	cmp	r3, #32
 8003036:	d107      	bne.n	8003048 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0220 	mvn.w	r2, #32
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f001 f824 	bl	8004090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_TIM_IC_ConfigChannel+0x1e>
 800306a:	2302      	movs	r3, #2
 800306c:	e088      	b.n	8003180 <HAL_TIM_IC_ConfigChannel+0x130>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11b      	bne.n	80030b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f000 fd48 	bl	8003b20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 020c 	bic.w	r2, r2, #12
 800309e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6999      	ldr	r1, [r3, #24]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	619a      	str	r2, [r3, #24]
 80030b2:	e060      	b.n	8003176 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d11c      	bne.n	80030f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f000 fdcc 	bl	8003c66 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699a      	ldr	r2, [r3, #24]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6999      	ldr	r1, [r3, #24]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	021a      	lsls	r2, r3, #8
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	619a      	str	r2, [r3, #24]
 80030f2:	e040      	b.n	8003176 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d11b      	bne.n	8003132 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f000 fe19 	bl	8003d40 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 020c 	bic.w	r2, r2, #12
 800311c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69d9      	ldr	r1, [r3, #28]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
 8003130:	e021      	b.n	8003176 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d11c      	bne.n	8003172 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f000 fe36 	bl	8003db8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800315a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69d9      	ldr	r1, [r3, #28]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	021a      	lsls	r2, r3, #8
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	61da      	str	r2, [r3, #28]
 8003170:	e001      	b.n	8003176 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800317e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e0ae      	b.n	8003304 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	f200 809f 	bhi.w	80032f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031b6:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031f1 	.word	0x080031f1
 80031c0:	080032f5 	.word	0x080032f5
 80031c4:	080032f5 	.word	0x080032f5
 80031c8:	080032f5 	.word	0x080032f5
 80031cc:	08003231 	.word	0x08003231
 80031d0:	080032f5 	.word	0x080032f5
 80031d4:	080032f5 	.word	0x080032f5
 80031d8:	080032f5 	.word	0x080032f5
 80031dc:	08003273 	.word	0x08003273
 80031e0:	080032f5 	.word	0x080032f5
 80031e4:	080032f5 	.word	0x080032f5
 80031e8:	080032f5 	.word	0x080032f5
 80031ec:	080032b3 	.word	0x080032b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fa50 	bl	800369c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0208 	orr.w	r2, r2, #8
 800320a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0204 	bic.w	r2, r2, #4
 800321a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6999      	ldr	r1, [r3, #24]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	619a      	str	r2, [r3, #24]
      break;
 800322e:	e064      	b.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	4618      	mov	r0, r3
 8003238:	f000 faa0 	bl	800377c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800324a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6999      	ldr	r1, [r3, #24]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	021a      	lsls	r2, r3, #8
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	619a      	str	r2, [r3, #24]
      break;
 8003270:	e043      	b.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 faf5 	bl	8003868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0208 	orr.w	r2, r2, #8
 800328c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0204 	bic.w	r2, r2, #4
 800329c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69d9      	ldr	r1, [r3, #28]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	61da      	str	r2, [r3, #28]
      break;
 80032b0:	e023      	b.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fb49 	bl	8003950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69d9      	ldr	r1, [r3, #28]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	021a      	lsls	r2, r3, #8
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	61da      	str	r2, [r3, #28]
      break;
 80032f2:	e002      	b.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
      break;
 80032f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003302:	7dfb      	ldrb	r3, [r7, #23]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_TIM_ConfigClockSource+0x1c>
 8003324:	2302      	movs	r3, #2
 8003326:	e0b4      	b.n	8003492 <HAL_TIM_ConfigClockSource+0x186>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800334e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003360:	d03e      	beq.n	80033e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003366:	f200 8087 	bhi.w	8003478 <HAL_TIM_ConfigClockSource+0x16c>
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	f000 8086 	beq.w	800347e <HAL_TIM_ConfigClockSource+0x172>
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d87f      	bhi.n	8003478 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b70      	cmp	r3, #112	; 0x70
 800337a:	d01a      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0xa6>
 800337c:	2b70      	cmp	r3, #112	; 0x70
 800337e:	d87b      	bhi.n	8003478 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b60      	cmp	r3, #96	; 0x60
 8003382:	d050      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x11a>
 8003384:	2b60      	cmp	r3, #96	; 0x60
 8003386:	d877      	bhi.n	8003478 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b50      	cmp	r3, #80	; 0x50
 800338a:	d03c      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0xfa>
 800338c:	2b50      	cmp	r3, #80	; 0x50
 800338e:	d873      	bhi.n	8003478 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d058      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x13a>
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d86f      	bhi.n	8003478 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b30      	cmp	r3, #48	; 0x30
 800339a:	d064      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x15a>
 800339c:	2b30      	cmp	r3, #48	; 0x30
 800339e:	d86b      	bhi.n	8003478 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d060      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x15a>
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d867      	bhi.n	8003478 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d05c      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x15a>
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d05a      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x15a>
 80033b0:	e062      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6899      	ldr	r1, [r3, #8]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f000 fd51 	bl	8003e68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	609a      	str	r2, [r3, #8]
      break;
 80033de:	e04f      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6899      	ldr	r1, [r3, #8]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f000 fd3a 	bl	8003e68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003402:	609a      	str	r2, [r3, #8]
      break;
 8003404:	e03c      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	461a      	mov	r2, r3
 8003414:	f000 fbf8 	bl	8003c08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2150      	movs	r1, #80	; 0x50
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fd07 	bl	8003e32 <TIM_ITRx_SetConfig>
      break;
 8003424:	e02c      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	461a      	mov	r2, r3
 8003434:	f000 fc54 	bl	8003ce0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2160      	movs	r1, #96	; 0x60
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fcf7 	bl	8003e32 <TIM_ITRx_SetConfig>
      break;
 8003444:	e01c      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6859      	ldr	r1, [r3, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	461a      	mov	r2, r3
 8003454:	f000 fbd8 	bl	8003c08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2140      	movs	r1, #64	; 0x40
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fce7 	bl	8003e32 <TIM_ITRx_SetConfig>
      break;
 8003464:	e00c      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f000 fcde 	bl	8003e32 <TIM_ITRx_SetConfig>
      break;
 8003476:	e003      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      break;
 800347c:	e000      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800347e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e031      	b.n	8003516 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fa99 	bl	80039fc <TIM_SlaveTimer_SetConfig>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e018      	b.n	8003516 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003502:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a40      	ldr	r2, [pc, #256]	; (8003670 <TIM_Base_SetConfig+0x114>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <TIM_Base_SetConfig+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357a:	d00f      	beq.n	800359c <TIM_Base_SetConfig+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a3d      	ldr	r2, [pc, #244]	; (8003674 <TIM_Base_SetConfig+0x118>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00b      	beq.n	800359c <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a3c      	ldr	r2, [pc, #240]	; (8003678 <TIM_Base_SetConfig+0x11c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d007      	beq.n	800359c <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3b      	ldr	r2, [pc, #236]	; (800367c <TIM_Base_SetConfig+0x120>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3a      	ldr	r2, [pc, #232]	; (8003680 <TIM_Base_SetConfig+0x124>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d108      	bne.n	80035ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <TIM_Base_SetConfig+0x114>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d02b      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035bc:	d027      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2c      	ldr	r2, [pc, #176]	; (8003674 <TIM_Base_SetConfig+0x118>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d023      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2b      	ldr	r2, [pc, #172]	; (8003678 <TIM_Base_SetConfig+0x11c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01f      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2a      	ldr	r2, [pc, #168]	; (800367c <TIM_Base_SetConfig+0x120>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01b      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a29      	ldr	r2, [pc, #164]	; (8003680 <TIM_Base_SetConfig+0x124>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d017      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a28      	ldr	r2, [pc, #160]	; (8003684 <TIM_Base_SetConfig+0x128>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a27      	ldr	r2, [pc, #156]	; (8003688 <TIM_Base_SetConfig+0x12c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00f      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a26      	ldr	r2, [pc, #152]	; (800368c <TIM_Base_SetConfig+0x130>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00b      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a25      	ldr	r2, [pc, #148]	; (8003690 <TIM_Base_SetConfig+0x134>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a24      	ldr	r2, [pc, #144]	; (8003694 <TIM_Base_SetConfig+0x138>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a23      	ldr	r2, [pc, #140]	; (8003698 <TIM_Base_SetConfig+0x13c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d108      	bne.n	8003620 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <TIM_Base_SetConfig+0x114>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_Base_SetConfig+0xf8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <TIM_Base_SetConfig+0x124>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d103      	bne.n	800365c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	615a      	str	r2, [r3, #20]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40010000 	.word	0x40010000
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40010400 	.word	0x40010400
 8003684:	40014000 	.word	0x40014000
 8003688:	40014400 	.word	0x40014400
 800368c:	40014800 	.word	0x40014800
 8003690:	40001800 	.word	0x40001800
 8003694:	40001c00 	.word	0x40001c00
 8003698:	40002000 	.word	0x40002000

0800369c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f023 0302 	bic.w	r3, r3, #2
 80036e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a20      	ldr	r2, [pc, #128]	; (8003774 <TIM_OC1_SetConfig+0xd8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <TIM_OC1_SetConfig+0x64>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <TIM_OC1_SetConfig+0xdc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10c      	bne.n	800371a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f023 0308 	bic.w	r3, r3, #8
 8003706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f023 0304 	bic.w	r3, r3, #4
 8003718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a15      	ldr	r2, [pc, #84]	; (8003774 <TIM_OC1_SetConfig+0xd8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d003      	beq.n	800372a <TIM_OC1_SetConfig+0x8e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a14      	ldr	r2, [pc, #80]	; (8003778 <TIM_OC1_SetConfig+0xdc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d111      	bne.n	800374e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	621a      	str	r2, [r3, #32]
}
 8003768:	bf00      	nop
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40010000 	.word	0x40010000
 8003778:	40010400 	.word	0x40010400

0800377c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	f023 0210 	bic.w	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 0320 	bic.w	r3, r3, #32
 80037c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a22      	ldr	r2, [pc, #136]	; (8003860 <TIM_OC2_SetConfig+0xe4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_OC2_SetConfig+0x68>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a21      	ldr	r2, [pc, #132]	; (8003864 <TIM_OC2_SetConfig+0xe8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d10d      	bne.n	8003800 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a17      	ldr	r2, [pc, #92]	; (8003860 <TIM_OC2_SetConfig+0xe4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_OC2_SetConfig+0x94>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a16      	ldr	r2, [pc, #88]	; (8003864 <TIM_OC2_SetConfig+0xe8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d113      	bne.n	8003838 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800381e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	621a      	str	r2, [r3, #32]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40010400 	.word	0x40010400

08003868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a21      	ldr	r2, [pc, #132]	; (8003948 <TIM_OC3_SetConfig+0xe0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d003      	beq.n	80038ce <TIM_OC3_SetConfig+0x66>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a20      	ldr	r2, [pc, #128]	; (800394c <TIM_OC3_SetConfig+0xe4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d10d      	bne.n	80038ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <TIM_OC3_SetConfig+0xe0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_OC3_SetConfig+0x92>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a15      	ldr	r2, [pc, #84]	; (800394c <TIM_OC3_SetConfig+0xe4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d113      	bne.n	8003922 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	621a      	str	r2, [r3, #32]
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	40010000 	.word	0x40010000
 800394c:	40010400 	.word	0x40010400

08003950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <TIM_OC4_SetConfig+0xa4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_OC4_SetConfig+0x68>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a11      	ldr	r2, [pc, #68]	; (80039f8 <TIM_OC4_SetConfig+0xa8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d109      	bne.n	80039cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40010000 	.word	0x40010000
 80039f8:	40010400 	.word	0x40010400

080039fc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a18:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b70      	cmp	r3, #112	; 0x70
 8003a44:	d01a      	beq.n	8003a7c <TIM_SlaveTimer_SetConfig+0x80>
 8003a46:	2b70      	cmp	r3, #112	; 0x70
 8003a48:	d860      	bhi.n	8003b0c <TIM_SlaveTimer_SetConfig+0x110>
 8003a4a:	2b60      	cmp	r3, #96	; 0x60
 8003a4c:	d054      	beq.n	8003af8 <TIM_SlaveTimer_SetConfig+0xfc>
 8003a4e:	2b60      	cmp	r3, #96	; 0x60
 8003a50:	d85c      	bhi.n	8003b0c <TIM_SlaveTimer_SetConfig+0x110>
 8003a52:	2b50      	cmp	r3, #80	; 0x50
 8003a54:	d046      	beq.n	8003ae4 <TIM_SlaveTimer_SetConfig+0xe8>
 8003a56:	2b50      	cmp	r3, #80	; 0x50
 8003a58:	d858      	bhi.n	8003b0c <TIM_SlaveTimer_SetConfig+0x110>
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d019      	beq.n	8003a92 <TIM_SlaveTimer_SetConfig+0x96>
 8003a5e:	2b40      	cmp	r3, #64	; 0x40
 8003a60:	d854      	bhi.n	8003b0c <TIM_SlaveTimer_SetConfig+0x110>
 8003a62:	2b30      	cmp	r3, #48	; 0x30
 8003a64:	d055      	beq.n	8003b12 <TIM_SlaveTimer_SetConfig+0x116>
 8003a66:	2b30      	cmp	r3, #48	; 0x30
 8003a68:	d850      	bhi.n	8003b0c <TIM_SlaveTimer_SetConfig+0x110>
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d051      	beq.n	8003b12 <TIM_SlaveTimer_SetConfig+0x116>
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d84c      	bhi.n	8003b0c <TIM_SlaveTimer_SetConfig+0x110>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d04d      	beq.n	8003b12 <TIM_SlaveTimer_SetConfig+0x116>
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d04b      	beq.n	8003b12 <TIM_SlaveTimer_SetConfig+0x116>
 8003a7a:	e047      	b.n	8003b0c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68d9      	ldr	r1, [r3, #12]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f000 f9ec 	bl	8003e68 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003a90:	e040      	b.n	8003b14 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d101      	bne.n	8003a9e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e03b      	b.n	8003b16 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a1a      	ldr	r2, [r3, #32]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	621a      	str	r2, [r3, #32]
      break;
 8003ae2:	e017      	b.n	8003b14 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6818      	ldr	r0, [r3, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	6899      	ldr	r1, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	461a      	mov	r2, r3
 8003af2:	f000 f889 	bl	8003c08 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003af6:	e00d      	b.n	8003b14 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	6899      	ldr	r1, [r3, #8]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	461a      	mov	r2, r3
 8003b06:	f000 f8eb 	bl	8003ce0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003b0a:	e003      	b.n	8003b14 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b10:	e000      	b.n	8003b14 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003b12:	bf00      	nop
  }

  return status;
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0201 	bic.w	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a28      	ldr	r2, [pc, #160]	; (8003bec <TIM_TI1_SetConfig+0xcc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01b      	beq.n	8003b86 <TIM_TI1_SetConfig+0x66>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d017      	beq.n	8003b86 <TIM_TI1_SetConfig+0x66>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a25      	ldr	r2, [pc, #148]	; (8003bf0 <TIM_TI1_SetConfig+0xd0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <TIM_TI1_SetConfig+0x66>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a24      	ldr	r2, [pc, #144]	; (8003bf4 <TIM_TI1_SetConfig+0xd4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00f      	beq.n	8003b86 <TIM_TI1_SetConfig+0x66>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a23      	ldr	r2, [pc, #140]	; (8003bf8 <TIM_TI1_SetConfig+0xd8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_TI1_SetConfig+0x66>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <TIM_TI1_SetConfig+0xdc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_TI1_SetConfig+0x66>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <TIM_TI1_SetConfig+0xe0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_TI1_SetConfig+0x66>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a20      	ldr	r2, [pc, #128]	; (8003c04 <TIM_TI1_SetConfig+0xe4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <TIM_TI1_SetConfig+0x6a>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <TIM_TI1_SetConfig+0x6c>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e003      	b.n	8003baa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f023 030a 	bic.w	r3, r3, #10
 8003bc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f003 030a 	and.w	r3, r3, #10
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00
 8003bfc:	40010400 	.word	0x40010400
 8003c00:	40014000 	.word	0x40014000
 8003c04:	40001800 	.word	0x40001800

08003c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0201 	bic.w	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 030a 	bic.w	r3, r3, #10
 8003c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b087      	sub	sp, #28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f023 0210 	bic.w	r2, r3, #16
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	031b      	lsls	r3, r3, #12
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f023 0210 	bic.w	r2, r3, #16
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	031b      	lsls	r3, r3, #12
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	621a      	str	r2, [r3, #32]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 0303 	bic.w	r3, r3, #3
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003d90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	621a      	str	r2, [r3, #32]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003df6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	031b      	lsls	r3, r3, #12
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	031b      	lsls	r3, r3, #12
 8003e10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	621a      	str	r2, [r3, #32]
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f043 0307 	orr.w	r3, r3, #7
 8003e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	609a      	str	r2, [r3, #8]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	021a      	lsls	r2, r3, #8
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	609a      	str	r2, [r3, #8]
}
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	2201      	movs	r2, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	401a      	ands	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a1a      	ldr	r2, [r3, #32]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e05a      	b.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d022      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d01d      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d018      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1b      	ldr	r2, [pc, #108]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1a      	ldr	r2, [pc, #104]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00e      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d009      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10c      	bne.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40000800 	.word	0x40000800
 8003fdc:	40000c00 	.word	0x40000c00
 8003fe0:	40010400 	.word	0x40010400
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40001800 	.word	0x40001800

08003fec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004004:	2302      	movs	r3, #2
 8004006:	e03d      	b.n	8004084 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e03f      	b.n	800414a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd f92e 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	; 0x24
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fd7b 	bl	8004bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b08a      	sub	sp, #40	; 0x28
 8004156:	af02      	add	r7, sp, #8
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	d17c      	bne.n	800426c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_UART_Transmit+0x2c>
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e075      	b.n	800426e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_UART_Transmit+0x3e>
 800418c:	2302      	movs	r3, #2
 800418e:	e06e      	b.n	800426e <HAL_UART_Transmit+0x11c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2221      	movs	r2, #33	; 0x21
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041a6:	f7fd f9ab 	bl	8001500 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	88fa      	ldrh	r2, [r7, #6]
 80041b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c0:	d108      	bne.n	80041d4 <HAL_UART_Transmit+0x82>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	e003      	b.n	80041dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041e4:	e02a      	b.n	800423c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2200      	movs	r2, #0
 80041ee:	2180      	movs	r1, #128	; 0x80
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 faf9 	bl	80047e8 <UART_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e036      	b.n	800426e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10b      	bne.n	800421e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004214:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	3302      	adds	r3, #2
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	e007      	b.n	800422e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	3301      	adds	r3, #1
 800422c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1cf      	bne.n	80041e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	2140      	movs	r1, #64	; 0x40
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fac9 	bl	80047e8 <UART_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e006      	b.n	800426e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	4618      	mov	r0, r3
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b0ba      	sub	sp, #232	; 0xe8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800429e:	2300      	movs	r3, #0
 80042a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10f      	bne.n	80042de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <HAL_UART_IRQHandler+0x66>
 80042ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fbd3 	bl	8004a82 <UART_Receive_IT>
      return;
 80042dc:	e256      	b.n	800478c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 80de 	beq.w	80044a4 <HAL_UART_IRQHandler+0x22c>
 80042e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80d1 	beq.w	80044a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_UART_IRQHandler+0xae>
 800430e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f043 0201 	orr.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_UART_IRQHandler+0xd2>
 8004332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0202 	orr.w	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_UART_IRQHandler+0xf6>
 8004356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f043 0204 	orr.w	r2, r3, #4
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800436e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d011      	beq.n	800439e <HAL_UART_IRQHandler+0x126>
 800437a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d105      	bne.n	8004392 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0208 	orr.w	r2, r3, #8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 81ed 	beq.w	8004782 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_UART_IRQHandler+0x14e>
 80043b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fb5e 	bl	8004a82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d0:	2b40      	cmp	r3, #64	; 0x40
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <HAL_UART_IRQHandler+0x17a>
 80043ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d04f      	beq.n	8004492 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fa66 	bl	80048c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d141      	bne.n	800448a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3314      	adds	r3, #20
 800440c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800441c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3314      	adds	r3, #20
 800442e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004432:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800443e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800444a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1d9      	bne.n	8004406 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	2b00      	cmp	r3, #0
 8004458:	d013      	beq.n	8004482 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	4a7d      	ldr	r2, [pc, #500]	; (8004654 <HAL_UART_IRQHandler+0x3dc>)
 8004460:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd f9d7 	bl	800181a <HAL_DMA_Abort_IT>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800447c:	4610      	mov	r0, r2
 800447e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	e00e      	b.n	80044a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f99a 	bl	80047bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	e00a      	b.n	80044a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f996 	bl	80047bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004490:	e006      	b.n	80044a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f992 	bl	80047bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800449e:	e170      	b.n	8004782 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a0:	bf00      	nop
    return;
 80044a2:	e16e      	b.n	8004782 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	f040 814a 	bne.w	8004742 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8143 	beq.w	8004742 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 813c 	beq.w	8004742 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	f040 80b4 	bne.w	8004658 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8140 	beq.w	8004786 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800450a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800450e:	429a      	cmp	r2, r3
 8004510:	f080 8139 	bcs.w	8004786 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800451a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004526:	f000 8088 	beq.w	800463a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004556:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800455a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004562:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800456e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1d9      	bne.n	800452a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3314      	adds	r3, #20
 800457c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3314      	adds	r3, #20
 8004596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800459a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800459e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e1      	bne.n	8004576 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3314      	adds	r3, #20
 80045b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3314      	adds	r3, #20
 80045d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e3      	bne.n	80045b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460a:	f023 0310 	bic.w	r3, r3, #16
 800460e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800461c:	65ba      	str	r2, [r7, #88]	; 0x58
 800461e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004622:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800462a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e3      	bne.n	80045f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	4618      	mov	r0, r3
 8004636:	f7fd f880 	bl	800173a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004642:	b29b      	uxth	r3, r3
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	b29b      	uxth	r3, r3
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8c0 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004650:	e099      	b.n	8004786 <HAL_UART_IRQHandler+0x50e>
 8004652:	bf00      	nop
 8004654:	0800498b 	.word	0x0800498b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004660:	b29b      	uxth	r3, r3
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 808b 	beq.w	800478a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8086 	beq.w	800478a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800468e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004694:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046a2:	647a      	str	r2, [r7, #68]	; 0x44
 80046a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e3      	bne.n	800467e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	623b      	str	r3, [r7, #32]
   return(result);
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046da:	633a      	str	r2, [r7, #48]	; 0x30
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e3      	bne.n	80046b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	60fb      	str	r3, [r7, #12]
   return(result);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0310 	bic.w	r3, r3, #16
 8004712:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004720:	61fa      	str	r2, [r7, #28]
 8004722:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	69b9      	ldr	r1, [r7, #24]
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	617b      	str	r3, [r7, #20]
   return(result);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e3      	bne.n	80046fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f848 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004740:	e023      	b.n	800478a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_UART_IRQHandler+0x4ea>
 800474e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f929 	bl	80049b2 <UART_Transmit_IT>
    return;
 8004760:	e014      	b.n	800478c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00e      	beq.n	800478c <HAL_UART_IRQHandler+0x514>
 800476e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f969 	bl	8004a52 <UART_EndTransmit_IT>
    return;
 8004780:	e004      	b.n	800478c <HAL_UART_IRQHandler+0x514>
    return;
 8004782:	bf00      	nop
 8004784:	e002      	b.n	800478c <HAL_UART_IRQHandler+0x514>
      return;
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <HAL_UART_IRQHandler+0x514>
      return;
 800478a:	bf00      	nop
  }
}
 800478c:	37e8      	adds	r7, #232	; 0xe8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop

08004794 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b090      	sub	sp, #64	; 0x40
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f8:	e050      	b.n	800489c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d04c      	beq.n	800489c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <UART_WaitOnFlagUntilTimeout+0x30>
 8004808:	f7fc fe7a 	bl	8001500 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004814:	429a      	cmp	r2, r3
 8004816:	d241      	bcs.n	800489c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004838:	637a      	str	r2, [r7, #52]	; 0x34
 800483a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800483e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e5      	bne.n	8004818 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3314      	adds	r3, #20
 8004852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	613b      	str	r3, [r7, #16]
   return(result);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	63bb      	str	r3, [r7, #56]	; 0x38
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800486c:	623a      	str	r2, [r7, #32]
 800486e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	69f9      	ldr	r1, [r7, #28]
 8004872:	6a3a      	ldr	r2, [r7, #32]
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	61bb      	str	r3, [r7, #24]
   return(result);
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e5      	bne.n	800484c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e00f      	b.n	80048bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d09f      	beq.n	80047fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3740      	adds	r7, #64	; 0x40
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b095      	sub	sp, #84	; 0x54
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ec:	643a      	str	r2, [r7, #64]	; 0x40
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3314      	adds	r3, #20
 8004906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	64bb      	str	r3, [r7, #72]	; 0x48
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3314      	adds	r3, #20
 800491e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004920:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	2b01      	cmp	r3, #1
 800493a:	d119      	bne.n	8004970 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	60bb      	str	r3, [r7, #8]
   return(result);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f023 0310 	bic.w	r3, r3, #16
 8004952:	647b      	str	r3, [r7, #68]	; 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800495c:	61ba      	str	r2, [r7, #24]
 800495e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6979      	ldr	r1, [r7, #20]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	613b      	str	r3, [r7, #16]
   return(result);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e5      	bne.n	800493c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800497e:	bf00      	nop
 8004980:	3754      	adds	r7, #84	; 0x54
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff ff09 	bl	80047bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b21      	cmp	r3, #33	; 0x21
 80049c4:	d13e      	bne.n	8004a44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d114      	bne.n	80049fa <UART_Transmit_IT+0x48>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d110      	bne.n	80049fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	1c9a      	adds	r2, r3, #2
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	621a      	str	r2, [r3, #32]
 80049f8:	e008      	b.n	8004a0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6211      	str	r1, [r2, #32]
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10f      	bne.n	8004a40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e000      	b.n	8004a46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
  }
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fe8e 	bl	8004794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b08c      	sub	sp, #48	; 0x30
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b22      	cmp	r3, #34	; 0x22
 8004a94:	f040 80ab 	bne.w	8004bee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa0:	d117      	bne.n	8004ad2 <UART_Receive_IT+0x50>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d113      	bne.n	8004ad2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	1c9a      	adds	r2, r3, #2
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28
 8004ad0:	e026      	b.n	8004b20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae4:	d007      	beq.n	8004af6 <UART_Receive_IT+0x74>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <UART_Receive_IT+0x82>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	e008      	b.n	8004b16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d15a      	bne.n	8004bea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0220 	bic.w	r2, r2, #32
 8004b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d135      	bne.n	8004be0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f023 0310 	bic.w	r3, r3, #16
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	623a      	str	r2, [r7, #32]
 8004b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	69f9      	ldr	r1, [r7, #28]
 8004ba0:	6a3a      	ldr	r2, [r7, #32]
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e5      	bne.n	8004b7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d10a      	bne.n	8004bd2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff fdf9 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
 8004bde:	e002      	b.n	8004be6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fde1 	bl	80047a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e002      	b.n	8004bf0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e000      	b.n	8004bf0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004bee:	2302      	movs	r3, #2
  }
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3730      	adds	r7, #48	; 0x30
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bfc:	b0c0      	sub	sp, #256	; 0x100
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	68d9      	ldr	r1, [r3, #12]
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	ea40 0301 	orr.w	r3, r0, r1
 8004c20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c50:	f021 010c 	bic.w	r1, r1, #12
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c72:	6999      	ldr	r1, [r3, #24]
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	ea40 0301 	orr.w	r3, r0, r1
 8004c7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b8f      	ldr	r3, [pc, #572]	; (8004ec4 <UART_SetConfig+0x2cc>)
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d005      	beq.n	8004c98 <UART_SetConfig+0xa0>
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b8d      	ldr	r3, [pc, #564]	; (8004ec8 <UART_SetConfig+0x2d0>)
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d104      	bne.n	8004ca2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c98:	f7fd f896 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8004c9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ca0:	e003      	b.n	8004caa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ca2:	f7fd f87d 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8004ca6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb4:	f040 810c 	bne.w	8004ed0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cca:	4622      	mov	r2, r4
 8004ccc:	462b      	mov	r3, r5
 8004cce:	1891      	adds	r1, r2, r2
 8004cd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cd2:	415b      	adcs	r3, r3
 8004cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cda:	4621      	mov	r1, r4
 8004cdc:	eb12 0801 	adds.w	r8, r2, r1
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	eb43 0901 	adc.w	r9, r3, r1
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cfa:	4690      	mov	r8, r2
 8004cfc:	4699      	mov	r9, r3
 8004cfe:	4623      	mov	r3, r4
 8004d00:	eb18 0303 	adds.w	r3, r8, r3
 8004d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d08:	462b      	mov	r3, r5
 8004d0a:	eb49 0303 	adc.w	r3, r9, r3
 8004d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d26:	460b      	mov	r3, r1
 8004d28:	18db      	adds	r3, r3, r3
 8004d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	eb42 0303 	adc.w	r3, r2, r3
 8004d32:	657b      	str	r3, [r7, #84]	; 0x54
 8004d34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d3c:	f7fb fac0 	bl	80002c0 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4b61      	ldr	r3, [pc, #388]	; (8004ecc <UART_SetConfig+0x2d4>)
 8004d46:	fba3 2302 	umull	r2, r3, r3, r2
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	011c      	lsls	r4, r3, #4
 8004d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d60:	4642      	mov	r2, r8
 8004d62:	464b      	mov	r3, r9
 8004d64:	1891      	adds	r1, r2, r2
 8004d66:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d68:	415b      	adcs	r3, r3
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d70:	4641      	mov	r1, r8
 8004d72:	eb12 0a01 	adds.w	sl, r2, r1
 8004d76:	4649      	mov	r1, r9
 8004d78:	eb43 0b01 	adc.w	fp, r3, r1
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d90:	4692      	mov	sl, r2
 8004d92:	469b      	mov	fp, r3
 8004d94:	4643      	mov	r3, r8
 8004d96:	eb1a 0303 	adds.w	r3, sl, r3
 8004d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	eb4b 0303 	adc.w	r3, fp, r3
 8004da4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004db4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004db8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	18db      	adds	r3, r3, r3
 8004dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	eb42 0303 	adc.w	r3, r2, r3
 8004dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dd2:	f7fb fa75 	bl	80002c0 <__aeabi_uldivmod>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <UART_SetConfig+0x2d4>)
 8004dde:	fba3 2301 	umull	r2, r3, r3, r1
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2264      	movs	r2, #100	; 0x64
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	1acb      	subs	r3, r1, r3
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004df2:	4b36      	ldr	r3, [pc, #216]	; (8004ecc <UART_SetConfig+0x2d4>)
 8004df4:	fba3 2302 	umull	r2, r3, r3, r2
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e00:	441c      	add	r4, r3
 8004e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	1891      	adds	r1, r2, r2
 8004e1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e1c:	415b      	adcs	r3, r3
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e24:	4641      	mov	r1, r8
 8004e26:	1851      	adds	r1, r2, r1
 8004e28:	6339      	str	r1, [r7, #48]	; 0x30
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	414b      	adcs	r3, r1
 8004e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e3c:	4659      	mov	r1, fp
 8004e3e:	00cb      	lsls	r3, r1, #3
 8004e40:	4651      	mov	r1, sl
 8004e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e46:	4651      	mov	r1, sl
 8004e48:	00ca      	lsls	r2, r1, #3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4642      	mov	r2, r8
 8004e52:	189b      	adds	r3, r3, r2
 8004e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e58:	464b      	mov	r3, r9
 8004e5a:	460a      	mov	r2, r1
 8004e5c:	eb42 0303 	adc.w	r3, r2, r3
 8004e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e78:	460b      	mov	r3, r1
 8004e7a:	18db      	adds	r3, r3, r3
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e7e:	4613      	mov	r3, r2
 8004e80:	eb42 0303 	adc.w	r3, r2, r3
 8004e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e8e:	f7fb fa17 	bl	80002c0 <__aeabi_uldivmod>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <UART_SetConfig+0x2d4>)
 8004e98:	fba3 1302 	umull	r1, r3, r3, r2
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	2164      	movs	r1, #100	; 0x64
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	3332      	adds	r3, #50	; 0x32
 8004eaa:	4a08      	ldr	r2, [pc, #32]	; (8004ecc <UART_SetConfig+0x2d4>)
 8004eac:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	f003 0207 	and.w	r2, r3, #7
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4422      	add	r2, r4
 8004ebe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ec0:	e105      	b.n	80050ce <UART_SetConfig+0x4d6>
 8004ec2:	bf00      	nop
 8004ec4:	40011000 	.word	0x40011000
 8004ec8:	40011400 	.word	0x40011400
 8004ecc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ede:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ee2:	4642      	mov	r2, r8
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	1891      	adds	r1, r2, r2
 8004ee8:	6239      	str	r1, [r7, #32]
 8004eea:	415b      	adcs	r3, r3
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
 8004eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	1854      	adds	r4, r2, r1
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	eb43 0501 	adc.w	r5, r3, r1
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	00eb      	lsls	r3, r5, #3
 8004f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f0a:	00e2      	lsls	r2, r4, #3
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	461d      	mov	r5, r3
 8004f10:	4643      	mov	r3, r8
 8004f12:	18e3      	adds	r3, r4, r3
 8004f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f18:	464b      	mov	r3, r9
 8004f1a:	eb45 0303 	adc.w	r3, r5, r3
 8004f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f3e:	4629      	mov	r1, r5
 8004f40:	008b      	lsls	r3, r1, #2
 8004f42:	4621      	mov	r1, r4
 8004f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f48:	4621      	mov	r1, r4
 8004f4a:	008a      	lsls	r2, r1, #2
 8004f4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f50:	f7fb f9b6 	bl	80002c0 <__aeabi_uldivmod>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4b60      	ldr	r3, [pc, #384]	; (80050dc <UART_SetConfig+0x4e4>)
 8004f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	011c      	lsls	r4, r3, #4
 8004f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f74:	4642      	mov	r2, r8
 8004f76:	464b      	mov	r3, r9
 8004f78:	1891      	adds	r1, r2, r2
 8004f7a:	61b9      	str	r1, [r7, #24]
 8004f7c:	415b      	adcs	r3, r3
 8004f7e:	61fb      	str	r3, [r7, #28]
 8004f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f84:	4641      	mov	r1, r8
 8004f86:	1851      	adds	r1, r2, r1
 8004f88:	6139      	str	r1, [r7, #16]
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	414b      	adcs	r3, r1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f9c:	4659      	mov	r1, fp
 8004f9e:	00cb      	lsls	r3, r1, #3
 8004fa0:	4651      	mov	r1, sl
 8004fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa6:	4651      	mov	r1, sl
 8004fa8:	00ca      	lsls	r2, r1, #3
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	189b      	adds	r3, r3, r2
 8004fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fb8:	464b      	mov	r3, r9
 8004fba:	460a      	mov	r2, r1
 8004fbc:	eb42 0303 	adc.w	r3, r2, r3
 8004fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fdc:	4649      	mov	r1, r9
 8004fde:	008b      	lsls	r3, r1, #2
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	008a      	lsls	r2, r1, #2
 8004fea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fee:	f7fb f967 	bl	80002c0 <__aeabi_uldivmod>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4b39      	ldr	r3, [pc, #228]	; (80050dc <UART_SetConfig+0x4e4>)
 8004ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	2164      	movs	r1, #100	; 0x64
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	3332      	adds	r3, #50	; 0x32
 800500a:	4a34      	ldr	r2, [pc, #208]	; (80050dc <UART_SetConfig+0x4e4>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005016:	441c      	add	r4, r3
 8005018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800501c:	2200      	movs	r2, #0
 800501e:	673b      	str	r3, [r7, #112]	; 0x70
 8005020:	677a      	str	r2, [r7, #116]	; 0x74
 8005022:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005026:	4642      	mov	r2, r8
 8005028:	464b      	mov	r3, r9
 800502a:	1891      	adds	r1, r2, r2
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	415b      	adcs	r3, r3
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005036:	4641      	mov	r1, r8
 8005038:	1851      	adds	r1, r2, r1
 800503a:	6039      	str	r1, [r7, #0]
 800503c:	4649      	mov	r1, r9
 800503e:	414b      	adcs	r3, r1
 8005040:	607b      	str	r3, [r7, #4]
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800504e:	4659      	mov	r1, fp
 8005050:	00cb      	lsls	r3, r1, #3
 8005052:	4651      	mov	r1, sl
 8005054:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005058:	4651      	mov	r1, sl
 800505a:	00ca      	lsls	r2, r1, #3
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	4603      	mov	r3, r0
 8005062:	4642      	mov	r2, r8
 8005064:	189b      	adds	r3, r3, r2
 8005066:	66bb      	str	r3, [r7, #104]	; 0x68
 8005068:	464b      	mov	r3, r9
 800506a:	460a      	mov	r2, r1
 800506c:	eb42 0303 	adc.w	r3, r2, r3
 8005070:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	663b      	str	r3, [r7, #96]	; 0x60
 800507c:	667a      	str	r2, [r7, #100]	; 0x64
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800508a:	4649      	mov	r1, r9
 800508c:	008b      	lsls	r3, r1, #2
 800508e:	4641      	mov	r1, r8
 8005090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005094:	4641      	mov	r1, r8
 8005096:	008a      	lsls	r2, r1, #2
 8005098:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800509c:	f7fb f910 	bl	80002c0 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <UART_SetConfig+0x4e4>)
 80050a6:	fba3 1302 	umull	r1, r3, r3, r2
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	2164      	movs	r1, #100	; 0x64
 80050ae:	fb01 f303 	mul.w	r3, r1, r3
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	3332      	adds	r3, #50	; 0x32
 80050b8:	4a08      	ldr	r2, [pc, #32]	; (80050dc <UART_SetConfig+0x4e4>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	f003 020f 	and.w	r2, r3, #15
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4422      	add	r2, r4
 80050cc:	609a      	str	r2, [r3, #8]
}
 80050ce:	bf00      	nop
 80050d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050d4:	46bd      	mov	sp, r7
 80050d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050da:	bf00      	nop
 80050dc:	51eb851f 	.word	0x51eb851f

080050e0 <__errno>:
 80050e0:	4b01      	ldr	r3, [pc, #4]	; (80050e8 <__errno+0x8>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	2000000c 	.word	0x2000000c

080050ec <__libc_init_array>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4d0d      	ldr	r5, [pc, #52]	; (8005124 <__libc_init_array+0x38>)
 80050f0:	4c0d      	ldr	r4, [pc, #52]	; (8005128 <__libc_init_array+0x3c>)
 80050f2:	1b64      	subs	r4, r4, r5
 80050f4:	10a4      	asrs	r4, r4, #2
 80050f6:	2600      	movs	r6, #0
 80050f8:	42a6      	cmp	r6, r4
 80050fa:	d109      	bne.n	8005110 <__libc_init_array+0x24>
 80050fc:	4d0b      	ldr	r5, [pc, #44]	; (800512c <__libc_init_array+0x40>)
 80050fe:	4c0c      	ldr	r4, [pc, #48]	; (8005130 <__libc_init_array+0x44>)
 8005100:	f000 fc8e 	bl	8005a20 <_init>
 8005104:	1b64      	subs	r4, r4, r5
 8005106:	10a4      	asrs	r4, r4, #2
 8005108:	2600      	movs	r6, #0
 800510a:	42a6      	cmp	r6, r4
 800510c:	d105      	bne.n	800511a <__libc_init_array+0x2e>
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	f855 3b04 	ldr.w	r3, [r5], #4
 8005114:	4798      	blx	r3
 8005116:	3601      	adds	r6, #1
 8005118:	e7ee      	b.n	80050f8 <__libc_init_array+0xc>
 800511a:	f855 3b04 	ldr.w	r3, [r5], #4
 800511e:	4798      	blx	r3
 8005120:	3601      	adds	r6, #1
 8005122:	e7f2      	b.n	800510a <__libc_init_array+0x1e>
 8005124:	08005aa0 	.word	0x08005aa0
 8005128:	08005aa0 	.word	0x08005aa0
 800512c:	08005aa0 	.word	0x08005aa0
 8005130:	08005aa4 	.word	0x08005aa4

08005134 <memset>:
 8005134:	4402      	add	r2, r0
 8005136:	4603      	mov	r3, r0
 8005138:	4293      	cmp	r3, r2
 800513a:	d100      	bne.n	800513e <memset+0xa>
 800513c:	4770      	bx	lr
 800513e:	f803 1b01 	strb.w	r1, [r3], #1
 8005142:	e7f9      	b.n	8005138 <memset+0x4>

08005144 <siprintf>:
 8005144:	b40e      	push	{r1, r2, r3}
 8005146:	b500      	push	{lr}
 8005148:	b09c      	sub	sp, #112	; 0x70
 800514a:	ab1d      	add	r3, sp, #116	; 0x74
 800514c:	9002      	str	r0, [sp, #8]
 800514e:	9006      	str	r0, [sp, #24]
 8005150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005154:	4809      	ldr	r0, [pc, #36]	; (800517c <siprintf+0x38>)
 8005156:	9107      	str	r1, [sp, #28]
 8005158:	9104      	str	r1, [sp, #16]
 800515a:	4909      	ldr	r1, [pc, #36]	; (8005180 <siprintf+0x3c>)
 800515c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005160:	9105      	str	r1, [sp, #20]
 8005162:	6800      	ldr	r0, [r0, #0]
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	a902      	add	r1, sp, #8
 8005168:	f000 f868 	bl	800523c <_svfiprintf_r>
 800516c:	9b02      	ldr	r3, [sp, #8]
 800516e:	2200      	movs	r2, #0
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	b01c      	add	sp, #112	; 0x70
 8005174:	f85d eb04 	ldr.w	lr, [sp], #4
 8005178:	b003      	add	sp, #12
 800517a:	4770      	bx	lr
 800517c:	2000000c 	.word	0x2000000c
 8005180:	ffff0208 	.word	0xffff0208

08005184 <__ssputs_r>:
 8005184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	688e      	ldr	r6, [r1, #8]
 800518a:	429e      	cmp	r6, r3
 800518c:	4682      	mov	sl, r0
 800518e:	460c      	mov	r4, r1
 8005190:	4690      	mov	r8, r2
 8005192:	461f      	mov	r7, r3
 8005194:	d838      	bhi.n	8005208 <__ssputs_r+0x84>
 8005196:	898a      	ldrh	r2, [r1, #12]
 8005198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800519c:	d032      	beq.n	8005204 <__ssputs_r+0x80>
 800519e:	6825      	ldr	r5, [r4, #0]
 80051a0:	6909      	ldr	r1, [r1, #16]
 80051a2:	eba5 0901 	sub.w	r9, r5, r1
 80051a6:	6965      	ldr	r5, [r4, #20]
 80051a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051b0:	3301      	adds	r3, #1
 80051b2:	444b      	add	r3, r9
 80051b4:	106d      	asrs	r5, r5, #1
 80051b6:	429d      	cmp	r5, r3
 80051b8:	bf38      	it	cc
 80051ba:	461d      	movcc	r5, r3
 80051bc:	0553      	lsls	r3, r2, #21
 80051be:	d531      	bpl.n	8005224 <__ssputs_r+0xa0>
 80051c0:	4629      	mov	r1, r5
 80051c2:	f000 fb63 	bl	800588c <_malloc_r>
 80051c6:	4606      	mov	r6, r0
 80051c8:	b950      	cbnz	r0, 80051e0 <__ssputs_r+0x5c>
 80051ca:	230c      	movs	r3, #12
 80051cc:	f8ca 3000 	str.w	r3, [sl]
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d6:	81a3      	strh	r3, [r4, #12]
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e0:	6921      	ldr	r1, [r4, #16]
 80051e2:	464a      	mov	r2, r9
 80051e4:	f000 fabe 	bl	8005764 <memcpy>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f2:	81a3      	strh	r3, [r4, #12]
 80051f4:	6126      	str	r6, [r4, #16]
 80051f6:	6165      	str	r5, [r4, #20]
 80051f8:	444e      	add	r6, r9
 80051fa:	eba5 0509 	sub.w	r5, r5, r9
 80051fe:	6026      	str	r6, [r4, #0]
 8005200:	60a5      	str	r5, [r4, #8]
 8005202:	463e      	mov	r6, r7
 8005204:	42be      	cmp	r6, r7
 8005206:	d900      	bls.n	800520a <__ssputs_r+0x86>
 8005208:	463e      	mov	r6, r7
 800520a:	6820      	ldr	r0, [r4, #0]
 800520c:	4632      	mov	r2, r6
 800520e:	4641      	mov	r1, r8
 8005210:	f000 fab6 	bl	8005780 <memmove>
 8005214:	68a3      	ldr	r3, [r4, #8]
 8005216:	1b9b      	subs	r3, r3, r6
 8005218:	60a3      	str	r3, [r4, #8]
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	4433      	add	r3, r6
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	2000      	movs	r0, #0
 8005222:	e7db      	b.n	80051dc <__ssputs_r+0x58>
 8005224:	462a      	mov	r2, r5
 8005226:	f000 fba5 	bl	8005974 <_realloc_r>
 800522a:	4606      	mov	r6, r0
 800522c:	2800      	cmp	r0, #0
 800522e:	d1e1      	bne.n	80051f4 <__ssputs_r+0x70>
 8005230:	6921      	ldr	r1, [r4, #16]
 8005232:	4650      	mov	r0, sl
 8005234:	f000 fabe 	bl	80057b4 <_free_r>
 8005238:	e7c7      	b.n	80051ca <__ssputs_r+0x46>
	...

0800523c <_svfiprintf_r>:
 800523c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005240:	4698      	mov	r8, r3
 8005242:	898b      	ldrh	r3, [r1, #12]
 8005244:	061b      	lsls	r3, r3, #24
 8005246:	b09d      	sub	sp, #116	; 0x74
 8005248:	4607      	mov	r7, r0
 800524a:	460d      	mov	r5, r1
 800524c:	4614      	mov	r4, r2
 800524e:	d50e      	bpl.n	800526e <_svfiprintf_r+0x32>
 8005250:	690b      	ldr	r3, [r1, #16]
 8005252:	b963      	cbnz	r3, 800526e <_svfiprintf_r+0x32>
 8005254:	2140      	movs	r1, #64	; 0x40
 8005256:	f000 fb19 	bl	800588c <_malloc_r>
 800525a:	6028      	str	r0, [r5, #0]
 800525c:	6128      	str	r0, [r5, #16]
 800525e:	b920      	cbnz	r0, 800526a <_svfiprintf_r+0x2e>
 8005260:	230c      	movs	r3, #12
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	e0d1      	b.n	800540e <_svfiprintf_r+0x1d2>
 800526a:	2340      	movs	r3, #64	; 0x40
 800526c:	616b      	str	r3, [r5, #20]
 800526e:	2300      	movs	r3, #0
 8005270:	9309      	str	r3, [sp, #36]	; 0x24
 8005272:	2320      	movs	r3, #32
 8005274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005278:	f8cd 800c 	str.w	r8, [sp, #12]
 800527c:	2330      	movs	r3, #48	; 0x30
 800527e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005428 <_svfiprintf_r+0x1ec>
 8005282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005286:	f04f 0901 	mov.w	r9, #1
 800528a:	4623      	mov	r3, r4
 800528c:	469a      	mov	sl, r3
 800528e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005292:	b10a      	cbz	r2, 8005298 <_svfiprintf_r+0x5c>
 8005294:	2a25      	cmp	r2, #37	; 0x25
 8005296:	d1f9      	bne.n	800528c <_svfiprintf_r+0x50>
 8005298:	ebba 0b04 	subs.w	fp, sl, r4
 800529c:	d00b      	beq.n	80052b6 <_svfiprintf_r+0x7a>
 800529e:	465b      	mov	r3, fp
 80052a0:	4622      	mov	r2, r4
 80052a2:	4629      	mov	r1, r5
 80052a4:	4638      	mov	r0, r7
 80052a6:	f7ff ff6d 	bl	8005184 <__ssputs_r>
 80052aa:	3001      	adds	r0, #1
 80052ac:	f000 80aa 	beq.w	8005404 <_svfiprintf_r+0x1c8>
 80052b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b2:	445a      	add	r2, fp
 80052b4:	9209      	str	r2, [sp, #36]	; 0x24
 80052b6:	f89a 3000 	ldrb.w	r3, [sl]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80a2 	beq.w	8005404 <_svfiprintf_r+0x1c8>
 80052c0:	2300      	movs	r3, #0
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295
 80052c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ca:	f10a 0a01 	add.w	sl, sl, #1
 80052ce:	9304      	str	r3, [sp, #16]
 80052d0:	9307      	str	r3, [sp, #28]
 80052d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052d6:	931a      	str	r3, [sp, #104]	; 0x68
 80052d8:	4654      	mov	r4, sl
 80052da:	2205      	movs	r2, #5
 80052dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e0:	4851      	ldr	r0, [pc, #324]	; (8005428 <_svfiprintf_r+0x1ec>)
 80052e2:	f7fa ff9d 	bl	8000220 <memchr>
 80052e6:	9a04      	ldr	r2, [sp, #16]
 80052e8:	b9d8      	cbnz	r0, 8005322 <_svfiprintf_r+0xe6>
 80052ea:	06d0      	lsls	r0, r2, #27
 80052ec:	bf44      	itt	mi
 80052ee:	2320      	movmi	r3, #32
 80052f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052f4:	0711      	lsls	r1, r2, #28
 80052f6:	bf44      	itt	mi
 80052f8:	232b      	movmi	r3, #43	; 0x2b
 80052fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005302:	2b2a      	cmp	r3, #42	; 0x2a
 8005304:	d015      	beq.n	8005332 <_svfiprintf_r+0xf6>
 8005306:	9a07      	ldr	r2, [sp, #28]
 8005308:	4654      	mov	r4, sl
 800530a:	2000      	movs	r0, #0
 800530c:	f04f 0c0a 	mov.w	ip, #10
 8005310:	4621      	mov	r1, r4
 8005312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005316:	3b30      	subs	r3, #48	; 0x30
 8005318:	2b09      	cmp	r3, #9
 800531a:	d94e      	bls.n	80053ba <_svfiprintf_r+0x17e>
 800531c:	b1b0      	cbz	r0, 800534c <_svfiprintf_r+0x110>
 800531e:	9207      	str	r2, [sp, #28]
 8005320:	e014      	b.n	800534c <_svfiprintf_r+0x110>
 8005322:	eba0 0308 	sub.w	r3, r0, r8
 8005326:	fa09 f303 	lsl.w	r3, r9, r3
 800532a:	4313      	orrs	r3, r2
 800532c:	9304      	str	r3, [sp, #16]
 800532e:	46a2      	mov	sl, r4
 8005330:	e7d2      	b.n	80052d8 <_svfiprintf_r+0x9c>
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	1d19      	adds	r1, r3, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	9103      	str	r1, [sp, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	bfbb      	ittet	lt
 800533e:	425b      	neglt	r3, r3
 8005340:	f042 0202 	orrlt.w	r2, r2, #2
 8005344:	9307      	strge	r3, [sp, #28]
 8005346:	9307      	strlt	r3, [sp, #28]
 8005348:	bfb8      	it	lt
 800534a:	9204      	strlt	r2, [sp, #16]
 800534c:	7823      	ldrb	r3, [r4, #0]
 800534e:	2b2e      	cmp	r3, #46	; 0x2e
 8005350:	d10c      	bne.n	800536c <_svfiprintf_r+0x130>
 8005352:	7863      	ldrb	r3, [r4, #1]
 8005354:	2b2a      	cmp	r3, #42	; 0x2a
 8005356:	d135      	bne.n	80053c4 <_svfiprintf_r+0x188>
 8005358:	9b03      	ldr	r3, [sp, #12]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	9203      	str	r2, [sp, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	bfb8      	it	lt
 8005364:	f04f 33ff 	movlt.w	r3, #4294967295
 8005368:	3402      	adds	r4, #2
 800536a:	9305      	str	r3, [sp, #20]
 800536c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005438 <_svfiprintf_r+0x1fc>
 8005370:	7821      	ldrb	r1, [r4, #0]
 8005372:	2203      	movs	r2, #3
 8005374:	4650      	mov	r0, sl
 8005376:	f7fa ff53 	bl	8000220 <memchr>
 800537a:	b140      	cbz	r0, 800538e <_svfiprintf_r+0x152>
 800537c:	2340      	movs	r3, #64	; 0x40
 800537e:	eba0 000a 	sub.w	r0, r0, sl
 8005382:	fa03 f000 	lsl.w	r0, r3, r0
 8005386:	9b04      	ldr	r3, [sp, #16]
 8005388:	4303      	orrs	r3, r0
 800538a:	3401      	adds	r4, #1
 800538c:	9304      	str	r3, [sp, #16]
 800538e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005392:	4826      	ldr	r0, [pc, #152]	; (800542c <_svfiprintf_r+0x1f0>)
 8005394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005398:	2206      	movs	r2, #6
 800539a:	f7fa ff41 	bl	8000220 <memchr>
 800539e:	2800      	cmp	r0, #0
 80053a0:	d038      	beq.n	8005414 <_svfiprintf_r+0x1d8>
 80053a2:	4b23      	ldr	r3, [pc, #140]	; (8005430 <_svfiprintf_r+0x1f4>)
 80053a4:	bb1b      	cbnz	r3, 80053ee <_svfiprintf_r+0x1b2>
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	3307      	adds	r3, #7
 80053aa:	f023 0307 	bic.w	r3, r3, #7
 80053ae:	3308      	adds	r3, #8
 80053b0:	9303      	str	r3, [sp, #12]
 80053b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b4:	4433      	add	r3, r6
 80053b6:	9309      	str	r3, [sp, #36]	; 0x24
 80053b8:	e767      	b.n	800528a <_svfiprintf_r+0x4e>
 80053ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80053be:	460c      	mov	r4, r1
 80053c0:	2001      	movs	r0, #1
 80053c2:	e7a5      	b.n	8005310 <_svfiprintf_r+0xd4>
 80053c4:	2300      	movs	r3, #0
 80053c6:	3401      	adds	r4, #1
 80053c8:	9305      	str	r3, [sp, #20]
 80053ca:	4619      	mov	r1, r3
 80053cc:	f04f 0c0a 	mov.w	ip, #10
 80053d0:	4620      	mov	r0, r4
 80053d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d6:	3a30      	subs	r2, #48	; 0x30
 80053d8:	2a09      	cmp	r2, #9
 80053da:	d903      	bls.n	80053e4 <_svfiprintf_r+0x1a8>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0c5      	beq.n	800536c <_svfiprintf_r+0x130>
 80053e0:	9105      	str	r1, [sp, #20]
 80053e2:	e7c3      	b.n	800536c <_svfiprintf_r+0x130>
 80053e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80053e8:	4604      	mov	r4, r0
 80053ea:	2301      	movs	r3, #1
 80053ec:	e7f0      	b.n	80053d0 <_svfiprintf_r+0x194>
 80053ee:	ab03      	add	r3, sp, #12
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	462a      	mov	r2, r5
 80053f4:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <_svfiprintf_r+0x1f8>)
 80053f6:	a904      	add	r1, sp, #16
 80053f8:	4638      	mov	r0, r7
 80053fa:	f3af 8000 	nop.w
 80053fe:	1c42      	adds	r2, r0, #1
 8005400:	4606      	mov	r6, r0
 8005402:	d1d6      	bne.n	80053b2 <_svfiprintf_r+0x176>
 8005404:	89ab      	ldrh	r3, [r5, #12]
 8005406:	065b      	lsls	r3, r3, #25
 8005408:	f53f af2c 	bmi.w	8005264 <_svfiprintf_r+0x28>
 800540c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800540e:	b01d      	add	sp, #116	; 0x74
 8005410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005414:	ab03      	add	r3, sp, #12
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	462a      	mov	r2, r5
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <_svfiprintf_r+0x1f8>)
 800541c:	a904      	add	r1, sp, #16
 800541e:	4638      	mov	r0, r7
 8005420:	f000 f87a 	bl	8005518 <_printf_i>
 8005424:	e7eb      	b.n	80053fe <_svfiprintf_r+0x1c2>
 8005426:	bf00      	nop
 8005428:	08005a64 	.word	0x08005a64
 800542c:	08005a6e 	.word	0x08005a6e
 8005430:	00000000 	.word	0x00000000
 8005434:	08005185 	.word	0x08005185
 8005438:	08005a6a 	.word	0x08005a6a

0800543c <_printf_common>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	4616      	mov	r6, r2
 8005442:	4699      	mov	r9, r3
 8005444:	688a      	ldr	r2, [r1, #8]
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800544c:	4293      	cmp	r3, r2
 800544e:	bfb8      	it	lt
 8005450:	4613      	movlt	r3, r2
 8005452:	6033      	str	r3, [r6, #0]
 8005454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005458:	4607      	mov	r7, r0
 800545a:	460c      	mov	r4, r1
 800545c:	b10a      	cbz	r2, 8005462 <_printf_common+0x26>
 800545e:	3301      	adds	r3, #1
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	0699      	lsls	r1, r3, #26
 8005466:	bf42      	ittt	mi
 8005468:	6833      	ldrmi	r3, [r6, #0]
 800546a:	3302      	addmi	r3, #2
 800546c:	6033      	strmi	r3, [r6, #0]
 800546e:	6825      	ldr	r5, [r4, #0]
 8005470:	f015 0506 	ands.w	r5, r5, #6
 8005474:	d106      	bne.n	8005484 <_printf_common+0x48>
 8005476:	f104 0a19 	add.w	sl, r4, #25
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	6832      	ldr	r2, [r6, #0]
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	42ab      	cmp	r3, r5
 8005482:	dc26      	bgt.n	80054d2 <_printf_common+0x96>
 8005484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005488:	1e13      	subs	r3, r2, #0
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	bf18      	it	ne
 800548e:	2301      	movne	r3, #1
 8005490:	0692      	lsls	r2, r2, #26
 8005492:	d42b      	bmi.n	80054ec <_printf_common+0xb0>
 8005494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005498:	4649      	mov	r1, r9
 800549a:	4638      	mov	r0, r7
 800549c:	47c0      	blx	r8
 800549e:	3001      	adds	r0, #1
 80054a0:	d01e      	beq.n	80054e0 <_printf_common+0xa4>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	68e5      	ldr	r5, [r4, #12]
 80054a6:	6832      	ldr	r2, [r6, #0]
 80054a8:	f003 0306 	and.w	r3, r3, #6
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	bf08      	it	eq
 80054b0:	1aad      	subeq	r5, r5, r2
 80054b2:	68a3      	ldr	r3, [r4, #8]
 80054b4:	6922      	ldr	r2, [r4, #16]
 80054b6:	bf0c      	ite	eq
 80054b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054bc:	2500      	movne	r5, #0
 80054be:	4293      	cmp	r3, r2
 80054c0:	bfc4      	itt	gt
 80054c2:	1a9b      	subgt	r3, r3, r2
 80054c4:	18ed      	addgt	r5, r5, r3
 80054c6:	2600      	movs	r6, #0
 80054c8:	341a      	adds	r4, #26
 80054ca:	42b5      	cmp	r5, r6
 80054cc:	d11a      	bne.n	8005504 <_printf_common+0xc8>
 80054ce:	2000      	movs	r0, #0
 80054d0:	e008      	b.n	80054e4 <_printf_common+0xa8>
 80054d2:	2301      	movs	r3, #1
 80054d4:	4652      	mov	r2, sl
 80054d6:	4649      	mov	r1, r9
 80054d8:	4638      	mov	r0, r7
 80054da:	47c0      	blx	r8
 80054dc:	3001      	adds	r0, #1
 80054de:	d103      	bne.n	80054e8 <_printf_common+0xac>
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e8:	3501      	adds	r5, #1
 80054ea:	e7c6      	b.n	800547a <_printf_common+0x3e>
 80054ec:	18e1      	adds	r1, r4, r3
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	2030      	movs	r0, #48	; 0x30
 80054f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054f6:	4422      	add	r2, r4
 80054f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005500:	3302      	adds	r3, #2
 8005502:	e7c7      	b.n	8005494 <_printf_common+0x58>
 8005504:	2301      	movs	r3, #1
 8005506:	4622      	mov	r2, r4
 8005508:	4649      	mov	r1, r9
 800550a:	4638      	mov	r0, r7
 800550c:	47c0      	blx	r8
 800550e:	3001      	adds	r0, #1
 8005510:	d0e6      	beq.n	80054e0 <_printf_common+0xa4>
 8005512:	3601      	adds	r6, #1
 8005514:	e7d9      	b.n	80054ca <_printf_common+0x8e>
	...

08005518 <_printf_i>:
 8005518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	7e0f      	ldrb	r7, [r1, #24]
 800551e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005520:	2f78      	cmp	r7, #120	; 0x78
 8005522:	4691      	mov	r9, r2
 8005524:	4680      	mov	r8, r0
 8005526:	460c      	mov	r4, r1
 8005528:	469a      	mov	sl, r3
 800552a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800552e:	d807      	bhi.n	8005540 <_printf_i+0x28>
 8005530:	2f62      	cmp	r7, #98	; 0x62
 8005532:	d80a      	bhi.n	800554a <_printf_i+0x32>
 8005534:	2f00      	cmp	r7, #0
 8005536:	f000 80d8 	beq.w	80056ea <_printf_i+0x1d2>
 800553a:	2f58      	cmp	r7, #88	; 0x58
 800553c:	f000 80a3 	beq.w	8005686 <_printf_i+0x16e>
 8005540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005548:	e03a      	b.n	80055c0 <_printf_i+0xa8>
 800554a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800554e:	2b15      	cmp	r3, #21
 8005550:	d8f6      	bhi.n	8005540 <_printf_i+0x28>
 8005552:	a101      	add	r1, pc, #4	; (adr r1, 8005558 <_printf_i+0x40>)
 8005554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005558:	080055b1 	.word	0x080055b1
 800555c:	080055c5 	.word	0x080055c5
 8005560:	08005541 	.word	0x08005541
 8005564:	08005541 	.word	0x08005541
 8005568:	08005541 	.word	0x08005541
 800556c:	08005541 	.word	0x08005541
 8005570:	080055c5 	.word	0x080055c5
 8005574:	08005541 	.word	0x08005541
 8005578:	08005541 	.word	0x08005541
 800557c:	08005541 	.word	0x08005541
 8005580:	08005541 	.word	0x08005541
 8005584:	080056d1 	.word	0x080056d1
 8005588:	080055f5 	.word	0x080055f5
 800558c:	080056b3 	.word	0x080056b3
 8005590:	08005541 	.word	0x08005541
 8005594:	08005541 	.word	0x08005541
 8005598:	080056f3 	.word	0x080056f3
 800559c:	08005541 	.word	0x08005541
 80055a0:	080055f5 	.word	0x080055f5
 80055a4:	08005541 	.word	0x08005541
 80055a8:	08005541 	.word	0x08005541
 80055ac:	080056bb 	.word	0x080056bb
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	1d1a      	adds	r2, r3, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	602a      	str	r2, [r5, #0]
 80055b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0a3      	b.n	800570c <_printf_i+0x1f4>
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	6829      	ldr	r1, [r5, #0]
 80055c8:	0606      	lsls	r6, r0, #24
 80055ca:	f101 0304 	add.w	r3, r1, #4
 80055ce:	d50a      	bpl.n	80055e6 <_printf_i+0xce>
 80055d0:	680e      	ldr	r6, [r1, #0]
 80055d2:	602b      	str	r3, [r5, #0]
 80055d4:	2e00      	cmp	r6, #0
 80055d6:	da03      	bge.n	80055e0 <_printf_i+0xc8>
 80055d8:	232d      	movs	r3, #45	; 0x2d
 80055da:	4276      	negs	r6, r6
 80055dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e0:	485e      	ldr	r0, [pc, #376]	; (800575c <_printf_i+0x244>)
 80055e2:	230a      	movs	r3, #10
 80055e4:	e019      	b.n	800561a <_printf_i+0x102>
 80055e6:	680e      	ldr	r6, [r1, #0]
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055ee:	bf18      	it	ne
 80055f0:	b236      	sxthne	r6, r6
 80055f2:	e7ef      	b.n	80055d4 <_printf_i+0xbc>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	6820      	ldr	r0, [r4, #0]
 80055f8:	1d19      	adds	r1, r3, #4
 80055fa:	6029      	str	r1, [r5, #0]
 80055fc:	0601      	lsls	r1, r0, #24
 80055fe:	d501      	bpl.n	8005604 <_printf_i+0xec>
 8005600:	681e      	ldr	r6, [r3, #0]
 8005602:	e002      	b.n	800560a <_printf_i+0xf2>
 8005604:	0646      	lsls	r6, r0, #25
 8005606:	d5fb      	bpl.n	8005600 <_printf_i+0xe8>
 8005608:	881e      	ldrh	r6, [r3, #0]
 800560a:	4854      	ldr	r0, [pc, #336]	; (800575c <_printf_i+0x244>)
 800560c:	2f6f      	cmp	r7, #111	; 0x6f
 800560e:	bf0c      	ite	eq
 8005610:	2308      	moveq	r3, #8
 8005612:	230a      	movne	r3, #10
 8005614:	2100      	movs	r1, #0
 8005616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800561a:	6865      	ldr	r5, [r4, #4]
 800561c:	60a5      	str	r5, [r4, #8]
 800561e:	2d00      	cmp	r5, #0
 8005620:	bfa2      	ittt	ge
 8005622:	6821      	ldrge	r1, [r4, #0]
 8005624:	f021 0104 	bicge.w	r1, r1, #4
 8005628:	6021      	strge	r1, [r4, #0]
 800562a:	b90e      	cbnz	r6, 8005630 <_printf_i+0x118>
 800562c:	2d00      	cmp	r5, #0
 800562e:	d04d      	beq.n	80056cc <_printf_i+0x1b4>
 8005630:	4615      	mov	r5, r2
 8005632:	fbb6 f1f3 	udiv	r1, r6, r3
 8005636:	fb03 6711 	mls	r7, r3, r1, r6
 800563a:	5dc7      	ldrb	r7, [r0, r7]
 800563c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005640:	4637      	mov	r7, r6
 8005642:	42bb      	cmp	r3, r7
 8005644:	460e      	mov	r6, r1
 8005646:	d9f4      	bls.n	8005632 <_printf_i+0x11a>
 8005648:	2b08      	cmp	r3, #8
 800564a:	d10b      	bne.n	8005664 <_printf_i+0x14c>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	07de      	lsls	r6, r3, #31
 8005650:	d508      	bpl.n	8005664 <_printf_i+0x14c>
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	6861      	ldr	r1, [r4, #4]
 8005656:	4299      	cmp	r1, r3
 8005658:	bfde      	ittt	le
 800565a:	2330      	movle	r3, #48	; 0x30
 800565c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005660:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005664:	1b52      	subs	r2, r2, r5
 8005666:	6122      	str	r2, [r4, #16]
 8005668:	f8cd a000 	str.w	sl, [sp]
 800566c:	464b      	mov	r3, r9
 800566e:	aa03      	add	r2, sp, #12
 8005670:	4621      	mov	r1, r4
 8005672:	4640      	mov	r0, r8
 8005674:	f7ff fee2 	bl	800543c <_printf_common>
 8005678:	3001      	adds	r0, #1
 800567a:	d14c      	bne.n	8005716 <_printf_i+0x1fe>
 800567c:	f04f 30ff 	mov.w	r0, #4294967295
 8005680:	b004      	add	sp, #16
 8005682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005686:	4835      	ldr	r0, [pc, #212]	; (800575c <_printf_i+0x244>)
 8005688:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800568c:	6829      	ldr	r1, [r5, #0]
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	f851 6b04 	ldr.w	r6, [r1], #4
 8005694:	6029      	str	r1, [r5, #0]
 8005696:	061d      	lsls	r5, r3, #24
 8005698:	d514      	bpl.n	80056c4 <_printf_i+0x1ac>
 800569a:	07df      	lsls	r7, r3, #31
 800569c:	bf44      	itt	mi
 800569e:	f043 0320 	orrmi.w	r3, r3, #32
 80056a2:	6023      	strmi	r3, [r4, #0]
 80056a4:	b91e      	cbnz	r6, 80056ae <_printf_i+0x196>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	f023 0320 	bic.w	r3, r3, #32
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	2310      	movs	r3, #16
 80056b0:	e7b0      	b.n	8005614 <_printf_i+0xfc>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	f043 0320 	orr.w	r3, r3, #32
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	2378      	movs	r3, #120	; 0x78
 80056bc:	4828      	ldr	r0, [pc, #160]	; (8005760 <_printf_i+0x248>)
 80056be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056c2:	e7e3      	b.n	800568c <_printf_i+0x174>
 80056c4:	0659      	lsls	r1, r3, #25
 80056c6:	bf48      	it	mi
 80056c8:	b2b6      	uxthmi	r6, r6
 80056ca:	e7e6      	b.n	800569a <_printf_i+0x182>
 80056cc:	4615      	mov	r5, r2
 80056ce:	e7bb      	b.n	8005648 <_printf_i+0x130>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	6826      	ldr	r6, [r4, #0]
 80056d4:	6961      	ldr	r1, [r4, #20]
 80056d6:	1d18      	adds	r0, r3, #4
 80056d8:	6028      	str	r0, [r5, #0]
 80056da:	0635      	lsls	r5, r6, #24
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	d501      	bpl.n	80056e4 <_printf_i+0x1cc>
 80056e0:	6019      	str	r1, [r3, #0]
 80056e2:	e002      	b.n	80056ea <_printf_i+0x1d2>
 80056e4:	0670      	lsls	r0, r6, #25
 80056e6:	d5fb      	bpl.n	80056e0 <_printf_i+0x1c8>
 80056e8:	8019      	strh	r1, [r3, #0]
 80056ea:	2300      	movs	r3, #0
 80056ec:	6123      	str	r3, [r4, #16]
 80056ee:	4615      	mov	r5, r2
 80056f0:	e7ba      	b.n	8005668 <_printf_i+0x150>
 80056f2:	682b      	ldr	r3, [r5, #0]
 80056f4:	1d1a      	adds	r2, r3, #4
 80056f6:	602a      	str	r2, [r5, #0]
 80056f8:	681d      	ldr	r5, [r3, #0]
 80056fa:	6862      	ldr	r2, [r4, #4]
 80056fc:	2100      	movs	r1, #0
 80056fe:	4628      	mov	r0, r5
 8005700:	f7fa fd8e 	bl	8000220 <memchr>
 8005704:	b108      	cbz	r0, 800570a <_printf_i+0x1f2>
 8005706:	1b40      	subs	r0, r0, r5
 8005708:	6060      	str	r0, [r4, #4]
 800570a:	6863      	ldr	r3, [r4, #4]
 800570c:	6123      	str	r3, [r4, #16]
 800570e:	2300      	movs	r3, #0
 8005710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005714:	e7a8      	b.n	8005668 <_printf_i+0x150>
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	462a      	mov	r2, r5
 800571a:	4649      	mov	r1, r9
 800571c:	4640      	mov	r0, r8
 800571e:	47d0      	blx	sl
 8005720:	3001      	adds	r0, #1
 8005722:	d0ab      	beq.n	800567c <_printf_i+0x164>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	079b      	lsls	r3, r3, #30
 8005728:	d413      	bmi.n	8005752 <_printf_i+0x23a>
 800572a:	68e0      	ldr	r0, [r4, #12]
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	4298      	cmp	r0, r3
 8005730:	bfb8      	it	lt
 8005732:	4618      	movlt	r0, r3
 8005734:	e7a4      	b.n	8005680 <_printf_i+0x168>
 8005736:	2301      	movs	r3, #1
 8005738:	4632      	mov	r2, r6
 800573a:	4649      	mov	r1, r9
 800573c:	4640      	mov	r0, r8
 800573e:	47d0      	blx	sl
 8005740:	3001      	adds	r0, #1
 8005742:	d09b      	beq.n	800567c <_printf_i+0x164>
 8005744:	3501      	adds	r5, #1
 8005746:	68e3      	ldr	r3, [r4, #12]
 8005748:	9903      	ldr	r1, [sp, #12]
 800574a:	1a5b      	subs	r3, r3, r1
 800574c:	42ab      	cmp	r3, r5
 800574e:	dcf2      	bgt.n	8005736 <_printf_i+0x21e>
 8005750:	e7eb      	b.n	800572a <_printf_i+0x212>
 8005752:	2500      	movs	r5, #0
 8005754:	f104 0619 	add.w	r6, r4, #25
 8005758:	e7f5      	b.n	8005746 <_printf_i+0x22e>
 800575a:	bf00      	nop
 800575c:	08005a75 	.word	0x08005a75
 8005760:	08005a86 	.word	0x08005a86

08005764 <memcpy>:
 8005764:	440a      	add	r2, r1
 8005766:	4291      	cmp	r1, r2
 8005768:	f100 33ff 	add.w	r3, r0, #4294967295
 800576c:	d100      	bne.n	8005770 <memcpy+0xc>
 800576e:	4770      	bx	lr
 8005770:	b510      	push	{r4, lr}
 8005772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800577a:	4291      	cmp	r1, r2
 800577c:	d1f9      	bne.n	8005772 <memcpy+0xe>
 800577e:	bd10      	pop	{r4, pc}

08005780 <memmove>:
 8005780:	4288      	cmp	r0, r1
 8005782:	b510      	push	{r4, lr}
 8005784:	eb01 0402 	add.w	r4, r1, r2
 8005788:	d902      	bls.n	8005790 <memmove+0x10>
 800578a:	4284      	cmp	r4, r0
 800578c:	4623      	mov	r3, r4
 800578e:	d807      	bhi.n	80057a0 <memmove+0x20>
 8005790:	1e43      	subs	r3, r0, #1
 8005792:	42a1      	cmp	r1, r4
 8005794:	d008      	beq.n	80057a8 <memmove+0x28>
 8005796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800579a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800579e:	e7f8      	b.n	8005792 <memmove+0x12>
 80057a0:	4402      	add	r2, r0
 80057a2:	4601      	mov	r1, r0
 80057a4:	428a      	cmp	r2, r1
 80057a6:	d100      	bne.n	80057aa <memmove+0x2a>
 80057a8:	bd10      	pop	{r4, pc}
 80057aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057b2:	e7f7      	b.n	80057a4 <memmove+0x24>

080057b4 <_free_r>:
 80057b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057b6:	2900      	cmp	r1, #0
 80057b8:	d044      	beq.n	8005844 <_free_r+0x90>
 80057ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057be:	9001      	str	r0, [sp, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f1a1 0404 	sub.w	r4, r1, #4
 80057c6:	bfb8      	it	lt
 80057c8:	18e4      	addlt	r4, r4, r3
 80057ca:	f000 f913 	bl	80059f4 <__malloc_lock>
 80057ce:	4a1e      	ldr	r2, [pc, #120]	; (8005848 <_free_r+0x94>)
 80057d0:	9801      	ldr	r0, [sp, #4]
 80057d2:	6813      	ldr	r3, [r2, #0]
 80057d4:	b933      	cbnz	r3, 80057e4 <_free_r+0x30>
 80057d6:	6063      	str	r3, [r4, #4]
 80057d8:	6014      	str	r4, [r2, #0]
 80057da:	b003      	add	sp, #12
 80057dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057e0:	f000 b90e 	b.w	8005a00 <__malloc_unlock>
 80057e4:	42a3      	cmp	r3, r4
 80057e6:	d908      	bls.n	80057fa <_free_r+0x46>
 80057e8:	6825      	ldr	r5, [r4, #0]
 80057ea:	1961      	adds	r1, r4, r5
 80057ec:	428b      	cmp	r3, r1
 80057ee:	bf01      	itttt	eq
 80057f0:	6819      	ldreq	r1, [r3, #0]
 80057f2:	685b      	ldreq	r3, [r3, #4]
 80057f4:	1949      	addeq	r1, r1, r5
 80057f6:	6021      	streq	r1, [r4, #0]
 80057f8:	e7ed      	b.n	80057d6 <_free_r+0x22>
 80057fa:	461a      	mov	r2, r3
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	b10b      	cbz	r3, 8005804 <_free_r+0x50>
 8005800:	42a3      	cmp	r3, r4
 8005802:	d9fa      	bls.n	80057fa <_free_r+0x46>
 8005804:	6811      	ldr	r1, [r2, #0]
 8005806:	1855      	adds	r5, r2, r1
 8005808:	42a5      	cmp	r5, r4
 800580a:	d10b      	bne.n	8005824 <_free_r+0x70>
 800580c:	6824      	ldr	r4, [r4, #0]
 800580e:	4421      	add	r1, r4
 8005810:	1854      	adds	r4, r2, r1
 8005812:	42a3      	cmp	r3, r4
 8005814:	6011      	str	r1, [r2, #0]
 8005816:	d1e0      	bne.n	80057da <_free_r+0x26>
 8005818:	681c      	ldr	r4, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	6053      	str	r3, [r2, #4]
 800581e:	4421      	add	r1, r4
 8005820:	6011      	str	r1, [r2, #0]
 8005822:	e7da      	b.n	80057da <_free_r+0x26>
 8005824:	d902      	bls.n	800582c <_free_r+0x78>
 8005826:	230c      	movs	r3, #12
 8005828:	6003      	str	r3, [r0, #0]
 800582a:	e7d6      	b.n	80057da <_free_r+0x26>
 800582c:	6825      	ldr	r5, [r4, #0]
 800582e:	1961      	adds	r1, r4, r5
 8005830:	428b      	cmp	r3, r1
 8005832:	bf04      	itt	eq
 8005834:	6819      	ldreq	r1, [r3, #0]
 8005836:	685b      	ldreq	r3, [r3, #4]
 8005838:	6063      	str	r3, [r4, #4]
 800583a:	bf04      	itt	eq
 800583c:	1949      	addeq	r1, r1, r5
 800583e:	6021      	streq	r1, [r4, #0]
 8005840:	6054      	str	r4, [r2, #4]
 8005842:	e7ca      	b.n	80057da <_free_r+0x26>
 8005844:	b003      	add	sp, #12
 8005846:	bd30      	pop	{r4, r5, pc}
 8005848:	200002b0 	.word	0x200002b0

0800584c <sbrk_aligned>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	4e0e      	ldr	r6, [pc, #56]	; (8005888 <sbrk_aligned+0x3c>)
 8005850:	460c      	mov	r4, r1
 8005852:	6831      	ldr	r1, [r6, #0]
 8005854:	4605      	mov	r5, r0
 8005856:	b911      	cbnz	r1, 800585e <sbrk_aligned+0x12>
 8005858:	f000 f8bc 	bl	80059d4 <_sbrk_r>
 800585c:	6030      	str	r0, [r6, #0]
 800585e:	4621      	mov	r1, r4
 8005860:	4628      	mov	r0, r5
 8005862:	f000 f8b7 	bl	80059d4 <_sbrk_r>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	d00a      	beq.n	8005880 <sbrk_aligned+0x34>
 800586a:	1cc4      	adds	r4, r0, #3
 800586c:	f024 0403 	bic.w	r4, r4, #3
 8005870:	42a0      	cmp	r0, r4
 8005872:	d007      	beq.n	8005884 <sbrk_aligned+0x38>
 8005874:	1a21      	subs	r1, r4, r0
 8005876:	4628      	mov	r0, r5
 8005878:	f000 f8ac 	bl	80059d4 <_sbrk_r>
 800587c:	3001      	adds	r0, #1
 800587e:	d101      	bne.n	8005884 <sbrk_aligned+0x38>
 8005880:	f04f 34ff 	mov.w	r4, #4294967295
 8005884:	4620      	mov	r0, r4
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	200002b4 	.word	0x200002b4

0800588c <_malloc_r>:
 800588c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005890:	1ccd      	adds	r5, r1, #3
 8005892:	f025 0503 	bic.w	r5, r5, #3
 8005896:	3508      	adds	r5, #8
 8005898:	2d0c      	cmp	r5, #12
 800589a:	bf38      	it	cc
 800589c:	250c      	movcc	r5, #12
 800589e:	2d00      	cmp	r5, #0
 80058a0:	4607      	mov	r7, r0
 80058a2:	db01      	blt.n	80058a8 <_malloc_r+0x1c>
 80058a4:	42a9      	cmp	r1, r5
 80058a6:	d905      	bls.n	80058b4 <_malloc_r+0x28>
 80058a8:	230c      	movs	r3, #12
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	2600      	movs	r6, #0
 80058ae:	4630      	mov	r0, r6
 80058b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b4:	4e2e      	ldr	r6, [pc, #184]	; (8005970 <_malloc_r+0xe4>)
 80058b6:	f000 f89d 	bl	80059f4 <__malloc_lock>
 80058ba:	6833      	ldr	r3, [r6, #0]
 80058bc:	461c      	mov	r4, r3
 80058be:	bb34      	cbnz	r4, 800590e <_malloc_r+0x82>
 80058c0:	4629      	mov	r1, r5
 80058c2:	4638      	mov	r0, r7
 80058c4:	f7ff ffc2 	bl	800584c <sbrk_aligned>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	4604      	mov	r4, r0
 80058cc:	d14d      	bne.n	800596a <_malloc_r+0xde>
 80058ce:	6834      	ldr	r4, [r6, #0]
 80058d0:	4626      	mov	r6, r4
 80058d2:	2e00      	cmp	r6, #0
 80058d4:	d140      	bne.n	8005958 <_malloc_r+0xcc>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	4631      	mov	r1, r6
 80058da:	4638      	mov	r0, r7
 80058dc:	eb04 0803 	add.w	r8, r4, r3
 80058e0:	f000 f878 	bl	80059d4 <_sbrk_r>
 80058e4:	4580      	cmp	r8, r0
 80058e6:	d13a      	bne.n	800595e <_malloc_r+0xd2>
 80058e8:	6821      	ldr	r1, [r4, #0]
 80058ea:	3503      	adds	r5, #3
 80058ec:	1a6d      	subs	r5, r5, r1
 80058ee:	f025 0503 	bic.w	r5, r5, #3
 80058f2:	3508      	adds	r5, #8
 80058f4:	2d0c      	cmp	r5, #12
 80058f6:	bf38      	it	cc
 80058f8:	250c      	movcc	r5, #12
 80058fa:	4629      	mov	r1, r5
 80058fc:	4638      	mov	r0, r7
 80058fe:	f7ff ffa5 	bl	800584c <sbrk_aligned>
 8005902:	3001      	adds	r0, #1
 8005904:	d02b      	beq.n	800595e <_malloc_r+0xd2>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	442b      	add	r3, r5
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	e00e      	b.n	800592c <_malloc_r+0xa0>
 800590e:	6822      	ldr	r2, [r4, #0]
 8005910:	1b52      	subs	r2, r2, r5
 8005912:	d41e      	bmi.n	8005952 <_malloc_r+0xc6>
 8005914:	2a0b      	cmp	r2, #11
 8005916:	d916      	bls.n	8005946 <_malloc_r+0xba>
 8005918:	1961      	adds	r1, r4, r5
 800591a:	42a3      	cmp	r3, r4
 800591c:	6025      	str	r5, [r4, #0]
 800591e:	bf18      	it	ne
 8005920:	6059      	strne	r1, [r3, #4]
 8005922:	6863      	ldr	r3, [r4, #4]
 8005924:	bf08      	it	eq
 8005926:	6031      	streq	r1, [r6, #0]
 8005928:	5162      	str	r2, [r4, r5]
 800592a:	604b      	str	r3, [r1, #4]
 800592c:	4638      	mov	r0, r7
 800592e:	f104 060b 	add.w	r6, r4, #11
 8005932:	f000 f865 	bl	8005a00 <__malloc_unlock>
 8005936:	f026 0607 	bic.w	r6, r6, #7
 800593a:	1d23      	adds	r3, r4, #4
 800593c:	1af2      	subs	r2, r6, r3
 800593e:	d0b6      	beq.n	80058ae <_malloc_r+0x22>
 8005940:	1b9b      	subs	r3, r3, r6
 8005942:	50a3      	str	r3, [r4, r2]
 8005944:	e7b3      	b.n	80058ae <_malloc_r+0x22>
 8005946:	6862      	ldr	r2, [r4, #4]
 8005948:	42a3      	cmp	r3, r4
 800594a:	bf0c      	ite	eq
 800594c:	6032      	streq	r2, [r6, #0]
 800594e:	605a      	strne	r2, [r3, #4]
 8005950:	e7ec      	b.n	800592c <_malloc_r+0xa0>
 8005952:	4623      	mov	r3, r4
 8005954:	6864      	ldr	r4, [r4, #4]
 8005956:	e7b2      	b.n	80058be <_malloc_r+0x32>
 8005958:	4634      	mov	r4, r6
 800595a:	6876      	ldr	r6, [r6, #4]
 800595c:	e7b9      	b.n	80058d2 <_malloc_r+0x46>
 800595e:	230c      	movs	r3, #12
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	4638      	mov	r0, r7
 8005964:	f000 f84c 	bl	8005a00 <__malloc_unlock>
 8005968:	e7a1      	b.n	80058ae <_malloc_r+0x22>
 800596a:	6025      	str	r5, [r4, #0]
 800596c:	e7de      	b.n	800592c <_malloc_r+0xa0>
 800596e:	bf00      	nop
 8005970:	200002b0 	.word	0x200002b0

08005974 <_realloc_r>:
 8005974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005978:	4680      	mov	r8, r0
 800597a:	4614      	mov	r4, r2
 800597c:	460e      	mov	r6, r1
 800597e:	b921      	cbnz	r1, 800598a <_realloc_r+0x16>
 8005980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005984:	4611      	mov	r1, r2
 8005986:	f7ff bf81 	b.w	800588c <_malloc_r>
 800598a:	b92a      	cbnz	r2, 8005998 <_realloc_r+0x24>
 800598c:	f7ff ff12 	bl	80057b4 <_free_r>
 8005990:	4625      	mov	r5, r4
 8005992:	4628      	mov	r0, r5
 8005994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005998:	f000 f838 	bl	8005a0c <_malloc_usable_size_r>
 800599c:	4284      	cmp	r4, r0
 800599e:	4607      	mov	r7, r0
 80059a0:	d802      	bhi.n	80059a8 <_realloc_r+0x34>
 80059a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059a6:	d812      	bhi.n	80059ce <_realloc_r+0x5a>
 80059a8:	4621      	mov	r1, r4
 80059aa:	4640      	mov	r0, r8
 80059ac:	f7ff ff6e 	bl	800588c <_malloc_r>
 80059b0:	4605      	mov	r5, r0
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d0ed      	beq.n	8005992 <_realloc_r+0x1e>
 80059b6:	42bc      	cmp	r4, r7
 80059b8:	4622      	mov	r2, r4
 80059ba:	4631      	mov	r1, r6
 80059bc:	bf28      	it	cs
 80059be:	463a      	movcs	r2, r7
 80059c0:	f7ff fed0 	bl	8005764 <memcpy>
 80059c4:	4631      	mov	r1, r6
 80059c6:	4640      	mov	r0, r8
 80059c8:	f7ff fef4 	bl	80057b4 <_free_r>
 80059cc:	e7e1      	b.n	8005992 <_realloc_r+0x1e>
 80059ce:	4635      	mov	r5, r6
 80059d0:	e7df      	b.n	8005992 <_realloc_r+0x1e>
	...

080059d4 <_sbrk_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4d06      	ldr	r5, [pc, #24]	; (80059f0 <_sbrk_r+0x1c>)
 80059d8:	2300      	movs	r3, #0
 80059da:	4604      	mov	r4, r0
 80059dc:	4608      	mov	r0, r1
 80059de:	602b      	str	r3, [r5, #0]
 80059e0:	f7fb f8ba 	bl	8000b58 <_sbrk>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d102      	bne.n	80059ee <_sbrk_r+0x1a>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	b103      	cbz	r3, 80059ee <_sbrk_r+0x1a>
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	bd38      	pop	{r3, r4, r5, pc}
 80059f0:	200002b8 	.word	0x200002b8

080059f4 <__malloc_lock>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__malloc_lock+0x8>)
 80059f6:	f000 b811 	b.w	8005a1c <__retarget_lock_acquire_recursive>
 80059fa:	bf00      	nop
 80059fc:	200002bc 	.word	0x200002bc

08005a00 <__malloc_unlock>:
 8005a00:	4801      	ldr	r0, [pc, #4]	; (8005a08 <__malloc_unlock+0x8>)
 8005a02:	f000 b80c 	b.w	8005a1e <__retarget_lock_release_recursive>
 8005a06:	bf00      	nop
 8005a08:	200002bc 	.word	0x200002bc

08005a0c <_malloc_usable_size_r>:
 8005a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a10:	1f18      	subs	r0, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	bfbc      	itt	lt
 8005a16:	580b      	ldrlt	r3, [r1, r0]
 8005a18:	18c0      	addlt	r0, r0, r3
 8005a1a:	4770      	bx	lr

08005a1c <__retarget_lock_acquire_recursive>:
 8005a1c:	4770      	bx	lr

08005a1e <__retarget_lock_release_recursive>:
 8005a1e:	4770      	bx	lr

08005a20 <_init>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr

08005a2c <_fini>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr
